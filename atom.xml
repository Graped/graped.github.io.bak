<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DInG BloG</title>
  
  <subtitle>静以致远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://grapedlinux.cn/"/>
  <updated>2017-05-08T11:52:31.818Z</updated>
  <id>http://grapedlinux.cn/</id>
  
  <author>
    <name>Graped</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Galera：多主同步MySQL集群原理解析</title>
    <link href="http://grapedlinux.cn/2017/05/08/17050801/"/>
    <id>http://grapedlinux.cn/2017/05/08/17050801/</id>
    <published>2017-05-08T11:50:09.000Z</published>
    <updated>2017-05-08T11:52:31.818Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Galera-Cluster-实现mysql群集"><a href="#Galera-Cluster-实现mysql群集" class="headerlink" title="Galera Cluster 实现mysql群集"></a>Galera Cluster 实现mysql群集</h5><p>参考：<br><a href="http://blog.itpub.net/14431099/viewspace-1316643/" target="_blank" rel="noopener">http://blog.itpub.net/14431099/viewspace-1316643/ </a><br><a href="http://lovestoned.blog.51cto.com/2904444/1617817" target="_blank" rel="noopener">http://lovestoned.blog.51cto.com/2904444/1617817</a><br><a href="http://www.itbaofeng.com/?p=59" target="_blank" rel="noopener">http://www.itbaofeng.com/?p=59</a><br><a href="http://lansgg.blog.51cto.com/5675165/1180305" target="_blank" rel="noopener">http://lansgg.blog.51cto.com/5675165/1180305</a> </p><h6 id="1-MySQL-Galera介绍"><a href="#1-MySQL-Galera介绍" class="headerlink" title="1. MySQL Galera介绍"></a>1. MySQL Galera介绍</h6><ul><li>MySQL/Galera是MySQL/InnoDB的多主集群,有以下特性: </li><li>同步复制</li><li>Active-active的多主拓扑结构</li><li>集群任意节点可以读和写</li><li>自动身份控制,失败节点自动脱离集群</li><li>自动节点接入</li><li>真正的基于”行”级别和ID检查的并行复制</li><li>客户端连接跟操作单台MySQL数据库的体验一致</li></ul><p>总结下来，官网上给出了大概以上等数条优势，总结下来就是两个比较突出的点：多主和同步。<br><strong>多主：</strong><br>Galera Cluster没有MySQL主从集群只有一个主能提供写服务的限制，集群中每个节点都可读可写，无需读写分离。在一个Galera Cluster前直接部署HAProxy做读写负责均衡是比较常用的做法。<br><strong>同步：</strong><br>Galera replication具有实时性，能够保障不同节点的数据视图在较小的时间范围内是一致的。MySQL原生replication方案slave中的SQL线程和IO线程是分离的，即便使用半同步甚至同步复制，也可能因为SQL线程的速度跟不上IO线程而导致slave数据落后很多，当然5.7引入并行复制后会好很多，而Galera中除了具有并行复制的功能外，还具有flow control的功能来控制节点间数据同步的速度。</p><p>Galera本质是一个wsrep提供者（provider），运行依赖于wsrep的API接口。Wsrep API定义了一系列应用回调和复制调用库，来实现事务数据库同步写集(writeset)复制以及相似应用。目的在于从应用细节上实现抽象的，隔离的复制。虽然这个接口的主要目标是基于认证的多主复制，但同样适用于异步和同步的主从复制。</p><h6 id="2-MySQL-Galera安装"><a href="#2-MySQL-Galera安装" class="headerlink" title="2. MySQL Galera安装"></a>2. MySQL Galera安装</h6><p>安装前准备</p><ol><li>机器准备(虚拟机)</li></ol><ul><li>master    192.168.137.128</li><li>backup    192.168.137.129</li><li>joiner   192.168.137.130</li></ul><ol start="2"><li>安装依赖</li></ol><ul><li>确认安装有gcc和gcc-c++的版本最少为4.4</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure><ul><li>确认安装有boost-devel的版本至少为1.4.1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y boost-devel</span><br></pre></td></tr></table></figure><ul><li>安装scons check-devel openssl-devel</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y scons check-devel openssl-devel</span><br></pre></td></tr></table></figure><h6 id="MySQL-Galera安装（从网上拷贝了一份安装文档，里面的版本为5-5-29，所以这里暂时用5-5-29版本）"><a href="#MySQL-Galera安装（从网上拷贝了一份安装文档，里面的版本为5-5-29，所以这里暂时用5-5-29版本）" class="headerlink" title="MySQL Galera安装（从网上拷贝了一份安装文档，里面的版本为5.5.29，所以这里暂时用5.5.29版本）"></a>MySQL Galera安装（从网上拷贝了一份安装文档，里面的版本为5.5.29，所以这里暂时用5.5.29版本）</h6><ol><li><p>安装含wsrep Patch的MySQL 5.5.29</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install libaio</span><br><span class="line">wget https://launchpad.net/codership-mysql/5.5/5.5.29-23.7.3/+download/mysql-5.5.29_wsrep_23.7.3-linux-x86_64.tar.gz</span><br><span class="line">tar zxvf mysql-5.5.29_wsrep_23.7.3-linux-x86_64.tar.gz </span><br><span class="line">mv mysql-5.5.29_wsrep_23.7.3-linux-x86_64 /usr/local/mysql</span><br><span class="line">cd /usr/local/mysql/</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line">chown -R mysql:mysql .</span><br><span class="line">./scripts/mysql_install_db --no-defaults --datadir=/usr/local/mysql/data --user=mysql</span><br><span class="line">chown -R root .</span><br><span class="line">chown -R mysql data</span><br></pre></td></tr></table></figure></li><li><p>安装Galera复制插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://launchpad.net/galera/2.x/23.2.4/+download/galera-23.2.4-src.tar.gz</span><br><span class="line">tar zxvf galera-23.2.4-src.tar.gz</span><br><span class="line">cd galera-23.2.4-src</span><br><span class="line">scons</span><br><span class="line">cp garb/garbd /usr/local/mysql/bin/</span><br><span class="line">cp libgalera_smm.so /usr/local/mysql/lib/plugin/</span><br></pre></td></tr></table></figure></li></ol><h6 id="MySQL-Galera配置"><a href="#MySQL-Galera配置" class="headerlink" title="MySQL Galera配置"></a>MySQL Galera配置</h6><ol><li>MySQL Galera配置例子:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"> mkdir -p /var/lib/mysql</span><br><span class="line"> chown mysql:mysql /var/lib/mysql</span><br><span class="line"> vi /etc/my.cnf</span><br><span class="line"> cat /etc/my.cnf</span><br><span class="line"> </span><br><span class="line"> [client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error = /var/lib/mysql/mysql.log</span><br><span class="line">pid-file = /var/lib/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">wsrep_node_name = node1</span><br><span class="line">wsrep_provider = /usr/local/mysql/lib/plugin/libgalera_smm.so</span><br><span class="line">#wsrep_provider_options =&apos;gcache.size=1G;socket.ssl_key=my_key;socket.ssl_cert=my_cert&apos;</span><br><span class="line">#wsrep_slave_threads=16</span><br><span class="line">wsrep_sst_method = rsync</span><br><span class="line">#wsrep_sst_auth=root:</span><br><span class="line"></span><br><span class="line">port = 3306</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">user = mysql</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">#innodb_buffer_pool_size=1G</span><br><span class="line">#innodb_log_file_size=256M</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">innodb_locks_unsafe_for_binlog=1</span><br><span class="line">innodb_flush_log_at_trx_commit=0</span><br><span class="line">innodb_doublewrite=0</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line"></span><br><span class="line">binlog_format=ROW</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=101</span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line">#read_only=1</span><br><span class="line">log-slave-updates=1</span><br></pre></td></tr></table></figure><p>注：以上配置，参考与Mysql wsrep 参数</p><h6 id="Mysql-Galera启动与关闭"><a href="#Mysql-Galera启动与关闭" class="headerlink" title="Mysql  Galera启动与关闭"></a>Mysql  Galera启动与关闭</h6><ol><li>初次启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;</span><br><span class="line"></span><br><span class="line"># 或</span><br><span class="line">service mysql start --wsrep_cluster_address=gcomm://</span><br><span class="line"></span><br><span class="line"># ”gcomm://”是特殊的地址,仅仅是galera cluster初始化启动时候使用,再次启动的时候需要使用具体的IP地址.</span><br></pre></td></tr></table></figure><ol start="2"><li>启动完成后发现mysqld的监听端口有两个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# netstat -plantu | grep mysqld</span><br><span class="line">tcp        0      0 0.0.0.0:4567 0.0.0.0:*          LISTEN      3656/mysqld         </span><br><span class="line">tcp        0      0 0.0.0.0:3306       0.0.0.0:*          LISTEN      3656/mysqld</span><br></pre></td></tr></table></figure></li></ol><p>这里4567端口是wsrep 使用的默认端口。</p><h6 id="MySQL-Galera新节点"><a href="#MySQL-Galera新节点" class="headerlink" title="MySQL Galera新节点"></a>MySQL Galera新节点</h6><ol><li>节点接入<br>添加新节点的时候,新接入的节点叫Joiner,给joiner提供复制的节点叫Donor.新的节点接入需要:</li></ol><ul><li>安装带wsrep patch的MySQL版本</li><li>安装Galera复制插件</li><li>配置好新节点的MySQL(参考Donnor的my.cnf)</li><li>配置或启动的gcomm://的地址是需要使用donnor的IP.</li></ul><p>接入节点backup：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=&quot;gcomm://192.168.137.128:4567,192.168.137.130:4567&quot;    &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure></p><p>接入节点joiner:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start --wsrep_cluster_address=&quot;gcomm://192.168.137.128:4567,192.168.137.129:4567&quot;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>修改节点的wsrep_cluster_address<br>修改wsrep_cluster_address有两种方式:</li></ol><p>i. 使用新的wsrep_cluster_address重启节点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart --wsrep_cluster_address=&quot;gcomm://192.168.137.129:4567,192.168.137.130:4567&quot;</span><br></pre></td></tr></table></figure></p><p>ii. 直接修改MySQL全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;wsrep_cluster_address&apos;;</span><br><span class="line">+-----------------------+----------------------------+</span><br><span class="line">| Variable_name         | Value                      |</span><br><span class="line">+-----------------------+----------------------------+</span><br><span class="line">| wsrep_cluster_address | gcomm://192.168.137.129:4567 |</span><br><span class="line">+-----------------------+----------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global wsrep_cluster_address=&quot;gcomm://192.168.137.129:4567,192.168.137.130:4567&quot;; Query OK, 0 rows affected (2.20 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;wsrep_cluster_address&apos;;</span><br><span class="line">+-----------------------+-------------------------------------------------------+</span><br><span class="line">| Variable_name         | Value                                                 |</span><br><span class="line">+-----------------------+-------------------------------------------------------+</span><br><span class="line">| wsrep_cluster_address | gcomm://192.168.137.129:4567,192.168.137.130:4567 |</span><br><span class="line">+-----------------------+-------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h6 id="MySQL-Galera监控"><a href="#MySQL-Galera监控" class="headerlink" title="MySQL Galera监控"></a>MySQL Galera监控</h6><ol><li>查看相关变量</li></ol><ul><li><p>查看MySQL版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW GLOBAL VARIABLES LIKE &apos;version&apos;;</span><br><span class="line">+---------------+------------+</span><br><span class="line">| Variable_name | Value      |</span><br><span class="line">+---------------+------------+</span><br><span class="line">| version       | 5.5.29-log |</span><br><span class="line">+---------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查看wsrep版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW GLOBAL STATUS LIKE &apos;wsrep_provider_version&apos;;</span><br><span class="line">+------------------------+------------+</span><br><span class="line">| Variable_name          | Value      |</span><br><span class="line">+------------------------+------------+</span><br><span class="line">| wsrep_provider_version | 2.4(rXXXX) |</span><br><span class="line">+------------------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p>查看wsrep有关的所有变量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;wsrep%&apos; \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Variable_name: wsrep_OSU_method</span><br><span class="line">        Value: TOI</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">Variable_name: wsrep_auto_increment_control</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">Variable_name: wsrep_causal_reads</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">Variable_name: wsrep_certify_nonPK</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">Variable_name: wsrep_cluster_address</span><br><span class="line">        Value: gcomm://192.168.1.222:4567,192.168.1.223:4567</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">Variable_name: wsrep_cluster_name</span><br><span class="line">        Value: my_wsrep_cluster</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">Variable_name: wsrep_convert_LOCK_to_trx</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">Variable_name: wsrep_data_home_dir</span><br><span class="line">        Value: /usr/local/mysql/data/</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">Variable_name: wsrep_dbug_option</span><br><span class="line">        Value: </span><br><span class="line">*************************** 10. row ***************************</span><br><span class="line">Variable_name: wsrep_debug</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 11. row ***************************</span><br><span class="line">Variable_name: wsrep_drupal_282555_workaround</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 12. row ***************************</span><br><span class="line">Variable_name: wsrep_forced_binlog_format</span><br><span class="line">        Value: NONE</span><br><span class="line">*************************** 13. row ***************************</span><br><span class="line">Variable_name: wsrep_log_conflicts</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 14. row ***************************</span><br><span class="line">Variable_name: wsrep_max_ws_rows</span><br><span class="line">        Value: 131072</span><br><span class="line">*************************** 15. row ***************************</span><br><span class="line">Variable_name: wsrep_max_ws_size</span><br><span class="line">        Value: 1073741824</span><br><span class="line">*************************** 16. row ***************************</span><br><span class="line">Variable_name: wsrep_mysql_replication_bundle</span><br><span class="line">        Value: 0</span><br><span class="line">*************************** 17. row ***************************</span><br><span class="line">Variable_name: wsrep_node_address</span><br><span class="line">        Value: </span><br><span class="line">*************************** 18. row ***************************</span><br><span class="line">Variable_name: wsrep_node_incoming_address</span><br><span class="line">        Value: AUTO</span><br><span class="line">*************************** 19. row ***************************</span><br><span class="line">Variable_name: wsrep_node_name</span><br><span class="line">        Value: node1</span><br><span class="line">*************************** 20. row ***************************</span><br><span class="line">Variable_name: wsrep_notify_cmd</span><br><span class="line">        Value: </span><br><span class="line">*************************** 21. row ***************************</span><br><span class="line">Variable_name: wsrep_on</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 22. row ***************************</span><br><span class="line">Variable_name: wsrep_provider</span><br><span class="line">        Value: /usr/local/mysql/lib/plugin/libgalera_smm.so</span><br><span class="line">*************************** 23. row ***************************</span><br><span class="line">Variable_name: wsrep_provider_options</span><br><span class="line">        Value: base_host = 192.168.1.221; base_port = 4567; cert.log_conflicts = no; evs.causal_keepalive_period = PT1S; evs.debug_log_mask = 0x1; evs.inactive_check_period = PT0.5S; evs.inactive_timeout = PT15S; evs.info_log_mask = 0; evs.install_timeout = PT15S; evs.join_retrans_period = PT1S; evs.keepalive_period = PT1S; evs.max_install_timeouts = 1; evs.send_window = 4; evs.stats_report_period = PT1M; evs.suspect_timeout = PT5S; evs.use_aggregate = true; evs.user_send_window = 2; evs.version = 0; evs.view_forget_timeout = PT5M; gcache.dir = /usr/local/mysql/data/; gcache.keep_pages_size = 0; gcache.mem_size = 0; gcache.name = /usr/local/mysql/data//galera.cache; gcache.page_size = 128M; gcache.size = 128M; gcs.fc_debug = 0; gcs.fc_factor = 1; gcs.fc_limit = 16; gcs.fc_master_slave = NO; gcs.max_packet_size = 64500; gcs.max_throttle = 0.25; gcs.recv_q_hard_limit = 9223372036854775807; gcs.recv_q_soft_limit = 0.25; gcs.sync_donor = NO; gmcast.listen_addr = tcp://0.0.0.0:4567; gmcast.mcast_addr = ; gmcast.mcast_ttl = 1; gmcast.peer_timeout = PT3S; gmcast.time_wait = PT5S; gmcast.version = 0; ist.recv_addr = 192.168.1.221; pc.checksum = true; pc.ignore_quorum = false; pc.ignore_sb = false; pc.linger = PT20S; pc.npvo = false; pc.version = 0; pc.weight = 1; protonet.backend = asio; protonet.version = 0; replicator.causal_read_timeout = PT30S; replicator.commit_order = 3</span><br><span class="line">*************************** 24. row ***************************</span><br><span class="line">Variable_name: wsrep_recover</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 25. row ***************************</span><br><span class="line">Variable_name: wsrep_replicate_myisam</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 26. row ***************************</span><br><span class="line">Variable_name: wsrep_retry_autocommit</span><br><span class="line">        Value: 1</span><br><span class="line">*************************** 27. row ***************************</span><br><span class="line">Variable_name: wsrep_slave_threads</span><br><span class="line">        Value: 2</span><br><span class="line">*************************** 28. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_auth</span><br><span class="line">        Value: </span><br><span class="line">*************************** 29. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_donor</span><br><span class="line">        Value: </span><br><span class="line">*************************** 30. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_donor_rejects_queries</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 31. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_method</span><br><span class="line">        Value: rsync</span><br><span class="line">*************************** 32. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_receive_address</span><br><span class="line">        Value: AUTO</span><br><span class="line">*************************** 33. row ***************************</span><br><span class="line">Variable_name: wsrep_start_position</span><br><span class="line">        Value: 80cdd13d-8cf2-11e2-0800-e0817023b754:0</span><br><span class="line">33 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>状态监控<br>查看Galera集群状态:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &apos;wsrep%&apos;;</span><br><span class="line">+----------------------------+----------------------------------------------------------+</span><br><span class="line">| Variable_name              | Value                                                    |</span><br><span class="line">+----------------------------+----------------------------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid     | 80cdd13d-8cf2-11e2-0800-e0817023b754                     |</span><br><span class="line">| wsrep_protocol_version     | 4                                                        |</span><br><span class="line">| wsrep_last_committed       | 3 |</span><br><span class="line">| wsrep_replicated           | 3                                                        |</span><br><span class="line">| wsrep_replicated_bytes     | 522                                                      |</span><br><span class="line">| wsrep_received             | 6  |</span><br><span class="line">| wsrep_received_bytes       | 1134  |</span><br><span class="line">| wsrep_local_commits        | 1                                                        |</span><br><span class="line">| wsrep_local_cert_failures  | 0                                                        |</span><br><span class="line">| wsrep_local_bf_aborts      | 0                                                        |</span><br><span class="line">| wsrep_local_replays        | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue     | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue_avg | 0.000000                                                 |</span><br><span class="line">| wsrep_local_recv_queue     | 0                                                        |</span><br><span class="line">| wsrep_local_recv_queue_avg | 0.000000                                                 |</span><br><span class="line">| wsrep_flow_control_paused  | 0.000000                                                 |</span><br><span class="line">| wsrep_flow_control_sent    | 0                                                        |</span><br><span class="line">| wsrep_flow_control_recv    | 0                                                        |</span><br><span class="line">| wsrep_cert_deps_distance   | 1.000000                                                 |</span><br><span class="line">| wsrep_apply_oooe           | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_oool           | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_window         | 1.000000                                                 |</span><br><span class="line">| wsrep_commit_oooe          | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_oool          | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_window        | 1.000000                                                 |</span><br><span class="line">| wsrep_local_state          | 4                                                        |</span><br><span class="line">| wsrep_local_state_comment  | Synced                                                   |</span><br><span class="line">| wsrep_cert_index_size      | 5                                                        |</span><br><span class="line">| wsrep_causal_reads         | 0                                                        |</span><br><span class="line">| wsrep_incoming_addresses   | 192.168.1.221:3306,192.168.1.222:3306,192.168.1.223:3306 |</span><br><span class="line">| wsrep_cluster_conf_id      | 13                                                       |</span><br><span class="line">| wsrep_cluster_size         | 3                                                        |</span><br><span class="line">| wsrep_cluster_state_uuid   | 80cdd13d-8cf2-11e2-0800-e0817023b754                     |</span><br><span class="line">| wsrep_cluster_status       | Primary                                                  |</span><br><span class="line">| wsrep_connected            | ON                                                       |</span><br><span class="line">| wsrep_local_index          | 0                                                        |</span><br><span class="line">| wsrep_provider_name        | Galera                                                   |</span><br><span class="line">| wsrep_provider_vendor      | Codership Oy                         |</span><br><span class="line">| wsrep_provider_version     | 2.4(rXXXX)                                               |</span><br><span class="line">| wsrep_ready                | ON |</span><br><span class="line">+----------------------------+----------------------------------------------------------+</span><br><span class="line">40 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>监控状态说明</p></li><li></li></ol><ul><li><p>集群完整性检查:</p><pre><code>wsrep_cluster_state_uuid:在集群所有节点的值应该是相同的,有不同值的节点,说明其没有连接入集群.wsrep_cluster_conf_id:正常情况下所有节点上该值是一样的.如果值不同,说明该节点被临时”分区”了.当节点之间网络连接恢复的时候应该会恢复一样的值.wsrep_cluster_size:如果这个值跟预期的节点数一致,则所有的集群节点已经连接.wsrep_cluster_status:集群组成的状态.如果不为”Primary”,说明出现”分区”或是”split-brain”状况.</code></pre></li><li><p>节点状态检查:</p><pre><code>wsrep_ready: 该值为ON,则说明可以接受SQL负载.如果为Off,则需要检查wsrep_connected.wsrep_connected: 如果该值为Off,且wsrep_ready的值也为Off,则说明该节点没有连接到集群.(可能是wsrep_cluster_address或wsrep_cluster_name等配置错造成的.具体错误需要查看错误日志)wsrep_local_state_comment:如果wsrep_connected为On,但wsrep_ready为OFF,则可以从该项查看原因.</code></pre></li><li><p>复制健康检查:</p><pre><code>wsrep_flow_control_paused:表示复制停止了多长时间.即表明集群因为Slave延迟而慢的程度.值为0~1,越靠近0越好,值为1表示复制完全停止.可优化wsrep_slave_threads的值来改善.wsrep_cert_deps_distance:有多少事务可以并行应用处理.wsrep_slave_threads设置的值不应该高出该值太多.wsrep_flow_control_sent:表示该节点已经停止复制了多少次.wsrep_local_recv_queue_avg:表示slave事务队列的平均长度.slave瓶颈的预兆.最慢的节点的wsrep_flow_control_sent和wsrep_local_recv_queue_avg这两个值最高.这两个值较低的话,相对更好.</code></pre></li><li><p>检测慢网络问题:</p><pre><code>wsrep_local_send_queue_avg:网络瓶颈的预兆.如果这个值比较高的话,可能存在网络瓶</code></pre></li><li><p>冲突或死锁的数目:</p><pre><code>wsrep_last_committed:最后提交的事务数目wsrep_local_cert_failures和wsrep_local_bf_aborts:回滚,检测到的冲突数目</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Galera-Cluster-实现mysql群集&quot;&gt;&lt;a href=&quot;#Galera-Cluster-实现mysql群集&quot; class=&quot;headerlink&quot; title=&quot;Galera Cluster 实现mysql群集&quot;&gt;&lt;/a&gt;Galera Cluster
      
    
    </summary>
    
      <category term="mysql" scheme="http://grapedlinux.cn/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://grapedlinux.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker详解</title>
    <link href="http://grapedlinux.cn/2017/04/14/17041401/"/>
    <id>http://grapedlinux.cn/2017/04/14/17041401/</id>
    <published>2017-04-13T16:23:46.000Z</published>
    <updated>2017-04-13T16:25:39.890Z</updated>
    
    <content type="html"><![CDATA[<h5 id="容器虚拟化–docker"><a href="#容器虚拟化–docker" class="headerlink" title="容器虚拟化–docker"></a>容器虚拟化–docker</h5><h6 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h6><ol><li><p>镜像<br>是一个只读的模板，类似于安装系统用到的那个iso文件，我们通过镜像来完成各种应用的部署。</p></li><li><p>docker容器<br>镜像类似于操作系统，而容器类似于虚拟机本身。它可以被启动、开始、停止、删除等操作，每个容器都是相互隔离的。</p></li><li><p>docker仓库<br>存放镜像的一个场所，仓库分为公开仓库和私有仓库。 最大的公开仓库是<a href="hub.docker.com">hub.docker.com</a>，国内公开仓库<a href="http://dockerpool.com/" target="_blank" rel="noopener">http://dockerpool.com/ </a></p></li></ol><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>centos6(6.5之前版本需要升级一下 yum update )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y docker-io</span><br></pre></td></tr></table></figure></p><p>centos7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure></p><p>启动docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/docker start</span><br></pre></td></tr></table></figure></p><h6 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker pull  centos   //从docker.com获取centos镜像，如果太慢，直接做个加速http://www.apelearn.com/bbs/thread-15126-1-1.html</span><br><span class="line">docker images  //查看本地都有哪些镜像</span><br><span class="line">docker tag centos graped123  //为centos镜像设置标签为graped123，再使用docker images查看会多出来一行，改行的image id和centos的一样</span><br><span class="line">docker search (image-name)   //从docker仓库搜索docker镜像，后面是关键词</span><br><span class="line">docker run -t -i centos  /bin/bash  //用下载到的镜像开启容器，-i表示让容器的标准输入打开，-t表示分配一个伪终端，要把-i -t 放到镜像名字前面</span><br><span class="line">当该镜像发生修改后，我们可以把该镜像提交重新生成一个新版本进行在本地。</span><br><span class="line">docker ps  //查看运行的容器</span><br><span class="line">docker rmi centos  //用来删除指定镜像， 其中后面的参数可以是tag，如果是tag时，实际上是删除该tag，只要该镜像还有其他tag，就不会删除该镜像。当后面的参数为镜像ID时，则会彻底删除整个镜像，连通所有标签一同删除</span><br><span class="line">docker ps -a //查看所有容器，包括已经退出的。</span><br></pre></td></tr></table></figure><p>创建镜像-基于已有镜像的容器创建<br>运行docker run后，进入到该容器中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it f68 /bin/bash</span><br></pre></td></tr></table></figure></p><p>我们做一些变更，比如安装一些东西，然后针对这个容器进行创建新的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m &quot;change somth&quot;  -a &quot;somebody info&quot;  image_id </span><br><span class="line">#例如：</span><br><span class="line">ocker commit -m &quot;install httpd&quot; -a &quot;Graped&quot; 2c74d574293f graped/centos</span><br></pre></td></tr></table></figure></p><p>这个命令有点像svn的提交，-m 加一些改动信息，-a 指定作者相关信息 2c74d这一串为容器id，再后面为新镜像的名字。</p><p>创建镜像-基于本地模板导入<br>模块获取，可以直接在网上下载一个模块  <a href="http://openvz.org/Download/templates/precreated" target="_blank" rel="noopener">http://openvz.org/Download/templates/precreated</a> 可惜速度并不快，假如我们下载了一个centos的模板 centos-5-x86.tar.gz 那么导入该镜像的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat centos-6-x86_64-minimal.tar.gz |docker import - centos-6-x86_64</span><br></pre></td></tr></table></figure></p><p>把现有镜像，导出为一个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o centos_with_net.tar graped/centos</span><br></pre></td></tr></table></figure></p><p>我们还可以用该文件恢复本地镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker load --input centos_net.tar  #或者</span><br><span class="line">docker load &lt; centos_net.tar</span><br></pre></td></tr></table></figure></p><p>上传镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push image_name</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;容器虚拟化–docker&quot;&gt;&lt;a href=&quot;#容器虚拟化–docker&quot; class=&quot;headerlink&quot; title=&quot;容器虚拟化–docker&quot;&gt;&lt;/a&gt;容器虚拟化–docker&lt;/h5&gt;&lt;h6 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://grapedlinux.cn/categories/docker/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL调优</title>
    <link href="http://grapedlinux.cn/2017/04/07/17040701/"/>
    <id>http://grapedlinux.cn/2017/04/07/17040701/</id>
    <published>2017-04-07T12:15:18.000Z</published>
    <updated>2017-04-07T15:08:31.548Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL调优可以从几个方面来做：</p><p><strong>架构层：</strong><br>做从库，实现读写分离；</p><p><strong>系统层次：</strong><br>增加内存；<br>给磁盘做raid0或者raid5以增加磁盘的读写速度；<a href="http://ask.apelearn.com/question/7134" target="_blank" rel="noopener">RAID相关</a><br>可以重新挂载磁盘，并加上noatime参数，这样可以减少磁盘的i/o;</p><p><strong>MySQL本身调优：</strong><br>(1) 如果未配置主从同步，可以把bin-log功能关闭，减少磁盘i/o<br>(2) 在my.cnf中加上skip-name-resolve,这样可以避免由于解析主机名延迟造成mysql执行慢<br>(3) 调整几个关键的buffer和cache。调整的依据，主要根据数据库的状态来调试。如何调优可以参考5.</p><p><strong>应用层次：</strong><br>查看慢查询日志，根据慢查询日志优化程序中的SQL语句，比如增加索引</p><p><strong>调整几个关键的buffer和cache</strong></p><p>1) key_buffer_size  首先可以根据系统的内存大小设定它，大概的一个参考值：1G以下内存设定128M；2G/256M; 4G/384M;8G/1024M；16G/2048M.这个值可以通过检查状态值Key_read_requests和 Key_reads,可以知道key_buffer_size设置是否合理。比例key_reads / key_read_requests应该尽可能的低，至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE ‘key_read%’获得)。注意：该参数值设置的过大反而会是服务器整体效率降低!</p><p>2) table_open_cache 打开一个表的时候，会临时把表里面的数据放到这部分内存中，一般设置成1024就够了，它的大小我们可以通过这样的方法来衡量： 如果你发现 open_tables等于table_cache，并且opened_tables在不断增长，那么你就需要增加table_cache的值了(上述状态值可以使用SHOW STATUS LIKE ‘Open%tables’获得)。注意，不能盲目地把table_cache设置成很大的值。如果设置得太高，可能会造成文件描述符不足，从而造成性能不稳定或者连接失败。</p><p>3) sort_buffer_size 查询排序时所能使用的缓冲区大小,该参数对应的分配内存是每连接独占!如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 4 = 400MB。所以，对于内存在4GB左右的服务器推荐设置为4-8M。</p><p>4) read_buffer_size 读查询操作所能使用的缓冲区大小。和sort_buffer_size一样，该参数对应的分配内存也是每连接独享!</p><p>5) join_buffer_size 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享!</p><p>6) myisam_sort_buffer_size 这个缓冲区主要用于修复表过程中排序索引使用的内存或者是建立索引时排序索引用到的内存大小，一般4G内存给64M即可。</p><p>7) query_cache_size MySQL查询操作缓冲区的大小，通过以下做法调整：SHOW STATUS LIKE ‘Qcache%’; 如果Qcache_lowmem_prunes该参数记录有多少条查询因为内存不足而被移除出查询缓存。通过这个值，用户可以适当的调整缓存大小。如果该值非常大，则表明经常出现缓冲不够的情况，需要增加缓存大小;Qcache_free_memory:查询缓存的内存大小，通过这个参数可以很清晰的知道当前系统的查询内存是否够用，是多了，还是不够用，我们可以根据实际情况做出调整。一般情况下4G内存设置64M足够了。</p><p>8) thread_cache_size 表示可以重新利用保存在缓存中线程的数，参考如下值：1G  —&gt; 8 2G  —&gt; 16 3G  —&gt; 32  &gt;3G  —&gt; 64<br>除此之外，还有几个比较关键的参数：</p><p>9) thread_concurrency 这个值设置为cpu核数的2倍即可</p><p>10) wait_timeout 表示空闲的连接超时时间，默认是28800s，这个参数是和interactive_timeout一起使用的，也就是说要想让wait_timeout 生效，必须同时设置interactive_timeout，建议他们两个都设置为10</p><p>11) max_connect_errors 是一个MySQL中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码的情况。与性能并无太大关系。为了避免一些错误我们一般都设置比较大，比如说10000 </p><p>12) max_connections 最大的连接数，根据业务请求量适当调整，设置500足够</p><p>13) max_user_connections 是指同一个账号能够同时连接到mysql服务的最大连接数。设置为0表示不限制。通常我们设置为100足够 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL调优可以从几个方面来做：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;架构层：&lt;/strong&gt;&lt;br&gt;做从库，实现读写分离；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统层次：&lt;/strong&gt;&lt;br&gt;增加内存；&lt;br&gt;给磁盘做raid0或者raid5以增加磁盘的读写速度；&lt;a hre
      
    
    </summary>
    
      <category term="mysql" scheme="http://grapedlinux.cn/categories/mysql/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop伪分布式安装</title>
    <link href="http://grapedlinux.cn/2017/04/05/17040502/"/>
    <id>http://grapedlinux.cn/2017/04/05/17040502/</id>
    <published>2017-04-05T15:46:19.000Z</published>
    <updated>2017-04-05T16:40:22.603Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop内容<br>官网：<a href="http://hadoop.apache.org/#What+Is+Apache+Hadoop%3F" target="_blank" rel="noopener">http://hadoop.apache.org/#What+Is+Apache+Hadoop%3F</a></p><p>Hadoop内容较复杂，安装根据不同的需求有三种模式<br>独立模式（standalong/local model ）：无需任何守护进程，所有程序都单个的JVM上执行。本模式适用于开发阶段下的测试和调式MapReduce。<br>伪分布（pesudo-distributed model）：Hadoop守护进程都运行在本地服务器上，模拟一个小规模的集群<br>全分布(full distributed model)：Hadoop 守护进程运行在一个集群上。</p><p>先安装伪分布式进行结合测试</p><h4 id="1-安装前准备："><a href="#1-安装前准备：" class="headerlink" title="1. 安装前准备："></a>1. 安装前准备：</h4><ol><li>JDK1.6.X</li><li>SSH</li><li>RSYNC</li></ol><h4 id="2-下载hadoop文件之后解压到目录-直接解压后设定为Hadoop目录即可"><a href="#2-下载hadoop文件之后解压到目录-直接解压后设定为Hadoop目录即可" class="headerlink" title="2. 下载hadoop文件之后解压到目录,直接解压后设定为Hadoop目录即可"></a>2. 下载hadoop文件之后解压到目录,直接解压后设定为Hadoop目录即可</h4><p>在环境变量中添加JAVA目录与Hadoop目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:$HOME/bin</span><br><span class="line">#export PATH</span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.6.0_30</span><br><span class="line">export PATH=$JAVA_HOME/bin:/usr/local/mysql/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">unset USERNAME</span><br><span class="line">export HADOOP_INSTALL=/usr/local/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_INSTALL/bin</span><br></pre></td></tr></table></figure></p><p>执行hadoop version 查看hadoop版本，且查看是否运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test /] hadoop version</span><br><span class="line">Hadoop 1.2.1</span><br><span class="line">Subversion https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1.2 -r 1503152</span><br><span class="line">Compiled by mattf on Mon Jul 22 15:23:09 PDT 2013</span><br><span class="line">From source with checksum 6923c86528809c4e7e6f493b6b413a9a</span><br><span class="line">This command was run using /usr/local/hadoop/hadoop-core-1.2.1.jar</span><br></pre></td></tr></table></figure></p><h4 id="3-配置SSH"><a href="#3-配置SSH" class="headerlink" title="3. 配置SSH"></a>3. 配置SSH</h4><p>首先要能ssh登录到本机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><p>如果无法登录，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix hadoop] ssh-keygen  -t dsa -P &apos;&apos; -f ~/.ssh/id_sea</span><br><span class="line">[root@zabbix hadoop] cat ~/.ssh/id_dsa.pub &amp;gt;&amp;gt;~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><h4 id="4-格式化HDFS文件系统"><a href="#4-格式化HDFS文件系统" class="headerlink" title="4. 格式化HDFS文件系统"></a>4. 格式化HDFS文件系统</h4><p>使用Hadoop前，必须格式化一个全新的HDFS系统 ，创建一个空的文件系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -frmat</span><br></pre></td></tr></table></figure></p><h4 id="5-Hadoop配置文件"><a href="#5-Hadoop配置文件" class="headerlink" title="5. Hadoop配置文件"></a>5. Hadoop配置文件</h4><p>conf目录中<br>core-site.xml 配置Common组件<br>hdfs-site.xml 配置HDFS属性<br>mapred-site.xml 配置MapReduce属性<br>默认情况下，三种模式的默认配置如图<br><img src="http://ask.apelearn.com/uploads/questions/20130929/145421x1hhs0fkgx00u11g.png" alt="image"></p><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/core-site.xml</span><br><span class="line">fs.default.namehdfs://localhost/</span><br><span class="line">//hdfs-site.xml</span><br><span class="line">dfs.replication1</span><br><span class="line">//mapred-site.xml</span><br><span class="line">mapred.job.trackerlocalhost:8021</span><br></pre></td></tr></table></figure></p><h4 id="6-启动HDFS和MapReduce守护进程"><a href="#6-启动HDFS和MapReduce守护进程" class="headerlink" title="6. 启动HDFS和MapReduce守护进程"></a>6. 启动HDFS和MapReduce守护进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@test conf] start-dfs.sh</span><br><span class="line">starting namenode, logging to /usr/local/hadoop/libexec/../logs/hadoop-root-namenode-zabbix.out</span><br><span class="line">localhost: starting datanode, logging to /usr/local/hadoop/libexec/../logs/hadoop-root-datanode-zabbix.out</span><br><span class="line">localhost: starting secondarynamenode, logging to /usr/local/hadoop/libexec/../logs/hadoop-root-secondarynamenode-zabbix.out</span><br><span class="line">[root@test conf]  start-mapred.sh</span><br><span class="line">starting jobtracker, logging to /usr/local/hadoop/libexec/../logs/hadoop-root-jobtracker-zabbix.out</span><br><span class="line">localhost: starting tasktracker, logging to /usr/local/hadoop/libexec/../logs/hadoop-root-tasktracker-zabbix.out</span><br></pre></td></tr></table></figure><h4 id="7-查看进程是否启动"><a href="#7-查看进程是否启动" class="headerlink" title="7. 查看进程是否启动"></a>7. 查看进程是否启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://namenode:50030/jobtracker.jsp</span><br><span class="line">http://namenode:50070/dfshealth.jsp</span><br><span class="line">[root@test conf]# netstat -lnp |grep 50030</span><br><span class="line">tcp        0      0 :::50030                    :::*                        LISTEN      3071/java           </span><br><span class="line">[root@test conf]# netstat -lnp |grep 50070</span><br><span class="line">tcp        0      0 :::50070               :::*                        LISTEN      2676/java</span><br></pre></td></tr></table></figure><p>JAVA的jps查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line">3220 TaskTracker</span><br><span class="line">2676 NameNode</span><br><span class="line">3071 JobTracker</span><br><span class="line">2803 DataNode</span><br><span class="line">2962 SecondaryNameNode</span><br><span class="line">3503 Jps</span><br></pre></td></tr></table></figure></p><p><strong>Hadoop常用命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//查看HDFS文件列表</span><br><span class="line">hadoop fs -ls /usr/local/log/</span><br><span class="line">//创建文件目录</span><br><span class="line">hadoop fs -mkdir /usr/local/log/test</span><br><span class="line">//删除文件</span><br><span class="line">/hadoop fs -rm /usr/local/log/11</span><br><span class="line">//上传一个本机文件到HDFS中/usr/local/log/目录下</span><br><span class="line">adoop fs -put /usr/local/src/infobright-4.0.6-0-x86_64-ice.rpm  /usr/local/log/</span><br><span class="line">//下载</span><br><span class="line">hadoop fs –get /usr/local/log/infobright-4.0.6-0-x86_64-ice.rpm   /usr/local/src/</span><br><span class="line">//查看文件</span><br><span class="line">hadoop fs -cat /usr/local/log/20131008_10/access.log.zabbix</span><br><span class="line">//查看HDFS基本使用情况</span><br><span class="line">[root@hh ~] hadoop dfsadmin -report</span><br><span class="line">Configured Capacity: 10397683712 (9.68 GB)</span><br><span class="line">Present Capacity: 9388027904 (8.74 GB)</span><br><span class="line">DFS Remaining: 9324613632 (8.68 GB)</span><br><span class="line">DFS Used: 63414272 (60.48 MB)                                 </span><br><span class="line">DFS Used%: 0.68%</span><br><span class="line">Under replicated blocks: 1</span><br><span class="line">Blocks with corrupt replicas: 0</span><br><span class="line">Missing blocks: 1</span><br><span class="line">-------------------------------------------------</span><br><span class="line">Datanodes available: 1 (1 total, 0 dead)</span><br><span class="line">Name: 127.0.0.1:50010</span><br><span class="line">Decommission Status : Normal</span><br><span class="line">Configured Capacity: 10397683712 (9.68 GB)</span><br><span class="line">DFS Used: 63414272 (60.48 MB)</span><br><span class="line">Non DFS Used: 1009655808 (962.88 MB)</span><br><span class="line">DFS Remaining: 9324613632(8.68 GB)</span><br><span class="line">DFS Used%: 0.61%</span><br><span class="line">DFS Remaining%: 89.68%</span><br><span class="line">Last contact: Tue Oct 08 13:41:05 CST 2013</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hadoop内容&lt;br&gt;官网：&lt;a href=&quot;http://hadoop.apache.org/#What+Is+Apache+Hadoop%3F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://hadoop.apache.org/#What
      
    
    </summary>
    
      <category term="hadoop" scheme="http://grapedlinux.cn/categories/hadoop/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>rsync 自动安装脚本</title>
    <link href="http://grapedlinux.cn/2017/04/05/17040501/"/>
    <id>http://grapedlinux.cn/2017/04/05/17040501/</id>
    <published>2017-04-05T07:15:36.000Z</published>
    <updated>2017-04-05T16:41:25.441Z</updated>
    
    <content type="html"><![CDATA[<p>rsync 自动安装脚本</p><pre><code>#!/bin/bash#home_page http://grapedlinux.cnrpm -q rsync &amp;&gt;/dev/null;rpm -q xinetd &amp;&gt;/dev/null || yum install rsync xinetd --nogpgcheck -y &amp;&gt;/dev/nullt=$(echo $?)if [[ &quot;$t&quot; != 0 ]];then    echo &quot;rsync is not install,try to install is faild,please check you yum configure or network! &quot;    exit 5fised -i &apos;s/yes/no/&apos; /etc/xinetd.d/rsync cat &gt; /etc/rsyncd.conf &lt;&lt;EOFuid = rootgid = rootuser chroot = nomax connections = 0[nginxconf]path=/usr/local/nginx/conf/ignore errorsread only = yeslist = nohosts allow = 10.15.6.50auth users = syncusersecrets file = /etc/server.pass[blogdata]path=/data/blog_data_bak/ignore errorsread only = yeslist = nohosts allow = 10.23.16.8auth users = syncusersecrets file = /etc/server.passEOFcat &gt; /etc/server.pass &lt;&lt;EOFsyncuser:password-not-foundEOFchmod 600 /etc/server.passservice xinetd restart &amp;&gt;/dev/nullres=$(netstat -nutlp | grep 873 | grep -v grep | wc -l)if [[ $res -ne 1 ]];then    echo &quot;Something wrong! please check.&quot;ficat &lt;&lt;EOFRynsc configure is success!config file is /etc/rsyncd.confpass file is /etc/server.passEOF</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;rsync 自动安装脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
#home_page http://grapedlinux.cn

rpm -q rsync &amp;amp;&amp;gt;/dev/null;
rpm -q xinetd &amp;amp;&amp;gt;/dev/nu
      
    
    </summary>
    
      <category term="shellscripts" scheme="http://grapedlinux.cn/categories/shellscripts/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Redis详解</title>
    <link href="http://grapedlinux.cn/2017/04/04/17040403/"/>
    <id>http://grapedlinux.cn/2017/04/04/17040403/</id>
    <published>2017-04-04T15:35:45.000Z</published>
    <updated>2017-04-04T16:29:20.088Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、Redis介绍</strong></p><ul><li>redis是一个key-value存储系统，官方站点<a href="http://redis.io" target="_blank" rel="noopener">http://redis.io</a></li><li>和memcached类似，但支持数据持久化</li><li>支持更多value类型，除了和string外，还支持hash、lists(链表）、sets(集合）和sorted sets（有序集合）集中数据类型</li><li>redis使用了两种文件格式：全量数据(RDB)和增量请求(aof)。全量数据格式是把内存中的数据写入磁盘，便于下次读取文件进行加载。增量请求文件则是把内存中的数据序列化为操作请求，用于读取文件进行replay得到数据</li><li>redis的存储分为内存存储、磁盘存储和log文件三部分</li></ul><p><strong>二、Redis下载安装</strong><br>下载解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget   https://codeload.github.com/antirez/redis/tar.gz/2.8.21</span><br><span class="line">mv 2.8.21 redis-2.8.21.tar.gz</span><br><span class="line">tar xf redis-2.8.21.tar.gz</span><br></pre></td></tr></table></figure></p><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd redis-2.8.21</span><br><span class="line">yum install -y gcc gcc-c++</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">cd src &amp;&amp; make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure></p><p><strong>三、Redis配置</strong></p><p>配置Redis的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/redis/etc</span><br><span class="line">vim  /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure></p><p>加入如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile /usr/local/redis/var/redis.pid</span><br><span class="line">port 6379</span><br><span class="line">timeout 300</span><br><span class="line">loglevel debug</span><br><span class="line">logfile /usr/local/redis/var/redis.log</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">rdbcompression yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /usr/local/redis/var/</span><br><span class="line">appendonly no</span><br><span class="line">appendfsync always</span><br></pre></td></tr></table></figure></p><p>下面是redis.conf的主 要配置参数的意义：<br>daemonize：是否以后台daemon方式运行<br>pidfile：pid文件位置<br>port：监听的端口号<br>timeout：请求超时时间<br>loglevel：log信息级别<br>logfile：log文件位置<br>databases：开启数据库的数量<br>save x x ：保存快照的频率，第一个x表示多长时间，第三个x表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。<br>rdbcompression：是否使用压缩<br>dbfilename：数据快照文件名（只是文件名，不包括目录）<br>dir：数据快照的保存目录（这个是目录）<br>appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。<br>appendfsync：appendonlylog如何同步到磁盘（三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步）</p><p>编写一个redis启动脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/init.d/redis   //加入如下内容：</span><br><span class="line">#!/bin/sh</span><br><span class="line">#</span><br><span class="line"># redis        init file for starting up the redis daemon</span><br><span class="line">#</span><br><span class="line"># chkconfig:   - 20 80</span><br><span class="line"># description: Starts and stops the redis daemon.</span><br><span class="line"></span><br><span class="line"># Source function library.</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line">name=&quot;redis-server&quot;</span><br><span class="line">basedir=&quot;/usr/local/redis&quot;</span><br><span class="line">exec=&quot;$basedir/bin/$name&quot;</span><br><span class="line">pidfile=&quot;$basedir/var/redis.pid&quot;</span><br><span class="line">REDIS_CONFIG=&quot;$basedir/etc/redis.conf&quot;</span><br><span class="line"></span><br><span class="line">[ -e /etc/sysconfig/redis ] &amp;&amp; . /etc/sysconfig/redis</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/redis</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">    [ -f $REDIS_CONFIG ] || exit 6</span><br><span class="line">    [ -x $exec ] || exit 5</span><br><span class="line">    echo -n $&quot;Starting $name: &quot;</span><br><span class="line">    daemon --user $&#123;REDIS_USER-redis&#125; &quot;$exec $REDIS_CONFIG&quot;</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    echo -n $&quot;Stopping $name: &quot;</span><br><span class="line">    killproc -p $pidfile $name</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart() &#123;</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reload() &#123;</span><br><span class="line">    false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_status() &#123;</span><br><span class="line">    status -p $pidfile $name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_status_q() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || exit 7</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">        restart</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart&#125;&quot;</span><br><span class="line">        exit 2</span><br><span class="line">esac</span><br><span class="line">exit $?</span><br></pre></td></tr></table></figure></p><p>因为脚本启动时以redis用户启动的，所以需要增加redis用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin redis</span><br><span class="line">mkdir /usr/local/redis/var</span><br><span class="line">chmod 777 /usr/local/redis/var</span><br><span class="line">chmod 755 /etc/init.d/redis</span><br><span class="line">chkconfig  --add redis</span><br><span class="line">chkconfig redis on</span><br><span class="line">service redis start</span><br></pre></td></tr></table></figure></p><p><strong>四、Redis数据类型</strong></p><p><strong>string</strong>：是最简单的类型，你可以理解成Memcached一样的类型，一个key对应一个value，支持的操作与Memcached的操作类似，它的功能更丰富。设置可以存二进制的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli </span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; mset key1 szk key2 love key3 yc</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget key1 key2 key3</span><br><span class="line">1) &quot;szk&quot;</span><br><span class="line">2) &quot;love&quot;</span><br><span class="line">3) &quot;yc&quot;</span><br></pre></td></tr></table></figure></p><p> <strong>list</strong>:是一个链表结构，主要功能是push、pop、获取一个范围的所有值等等。操作中key理解为链接的名字。使用List结构，我们可以轻松的实现最新消息排行等功能。使用List结构，我们可以轻松地实现最新消息排行等功能。List的另一个应用就是消息队列，可以利用list的push操作，将任务存在list中，然后工作线程再用pop操作将任务取出进行执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 123</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list1 aaa</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list1 &quot;123 456&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; rpop list1</span><br><span class="line">&quot;123&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list1</span><br><span class="line">&quot;aaa&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list1</span><br></pre></td></tr></table></figure></p><p><strong>set</strong>:是集合，和我们数学中的集合概念类似，对集合的操作有添加删除元素，有对多个集合求交并差等操作。操作中key理解为集合的名字。比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。因为Redis非常人性化的为几个提供了求交集、并集、差集等操作，那么就可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合 操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。QQ有一个社交功能叫做”好友标签”，这时就可以使用redis的集合来实现，把每一个用户的标签都存储在一个集合之中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd set1 zbc</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd set1 szk</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers set1</span><br><span class="line">1) &quot;zbc&quot;</span><br></pre></td></tr></table></figure></p><p><strong>sorted set</strong>:是有序集合，它比set多了一个权重参数score，使得集合中的元素能够按score进行有序排列，比如一个存储全班同学成绩的Sorted Sets，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd mset2 2 &quot;cde 123&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mset2 4 &quot;a123a&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mset2 24 &quot;123-aaa&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange mset2 0 -1</span><br><span class="line">1) &quot;cde 123&quot;</span><br><span class="line">2) &quot;a123a&quot;</span><br><span class="line">3) &quot;123-aaa&quot;</span><br></pre></td></tr></table></figure></p><p><strong> hash</strong>：在memcached中，经常将一些结构化的信息打包成hashmap，在客户端序列化后存储为一个字符串的值（一般是JSON格式），比如用户的昵称、年龄、性别、积分等。</p><p><strong>六、Redis通用配置</strong></p><ul><li>daemonize no #默认情况下，redis并不是以daemon形式来运行的。通过daemonize配置项可以控制redis的运行形式。</li><li>pidfile /path/to/redis.pid #当以daemon形式运行时，redis会生成一个pid文件，默认会生成在/var/run/redis.pid</li><li>bind 192.168.1.200 #指定绑定的IP，可以有多个</li><li>port 6379 #指定监听端口</li><li>unixsocket /tmp/redis.sock #也可以监听socket</li><li>unixsocketperm 755 #当监听socket时可以指定权限为755</li><li>timeout 0 #当一个redis-client一直没有请求发向server端，那么server端有权主动关闭这个连接，可以通过timeout来设置“空间超时时限”,0表示永不关闭</li><li>tcp-keepalive 0 #TCP连接保活策略，可以通过tcp-keepalive配置项来进行设置，单位为秒，假如设置为60秒，则server端会每60秒向连接空闲的客户端发起一次ACk请求，以检查客户端是否已经挂掉，对于无响应的客户端则会关闭其连接。如果设置为0，则不会进行保活检测</li><li>loglevel notice #日志级别，有四种debug，verbose，notice，warning</li><li>logfile “” #定义日志路径</li><li>syslog-ident redis #如果希望日志打印到sysllog中，通过syslog-enabled来控制</li><li>syslog-facility local0 #指定syslog的设备，可以是USER或者local0-local7</li><li>databases 16 #设置数据库的总数量，select n 选择数据库，0 - 15</li></ul><p><strong>七、Redis快照配置（rdb持久化）</strong></p><ul><li>save 900 1 #表示每15分钟且至少有1个key改变，就触发一次持久化</li><li>save 300 10 #表示每5分钟至少有10个key改变，就触发一次持久化</li><li>save 60 1000 #表示每60秒至少有10000个key改变，就触发一次持久</li><li>save “” #这样可以禁用rdb持久化</li><li>stop-write-on-bgsave-error yes #rdb持久化写入磁盘避免不了会出现失败的情况，默认一旦出现失败，redis会马上停止写操作。如果你觉得无所谓，那就可以使用选项关闭这个功能</li><li>rdbcompression yes #是否要压缩</li><li>rdbchecksum yes #是否进行数据校验</li><li>dir ./ #定义快照文件储存路径</li></ul><p><strong>八、Redis安全相关配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/redis/etc/redis.conf  #设置redis-server的密码</span><br><span class="line">#增加下面配置</span><br><span class="line"></span><br><span class="line">requirepass szk</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -a szk  #-a指定密码登录</span><br></pre></td></tr></table></figure><ul><li>rename-command CONFIG szk.config   #将CONFIG命令更名为szk.config，这样可以避免误操作，但 如果使用了AOF持久化，建议不要启用该功能</li><li>rename-command CONFIG “”  #也可以后面定义为空，这样就禁掉了该CONFIG命令</li></ul><p><strong>九、Redis限制相关配置</strong></p><ul><li>maxclients 10000 #限制最大客户端连接数</li><li>maxmemory  #设定最大内存使用数，单位是byte</li><li>maxmemory-policy volatile-lru #指定内存移除规则</li><li>maxmemory-samples 3 #LRU算大和最小TTL算法都并非是精确的算法，而是估算值。所以你可以设置样本的大小。假如redis默认会检查三个key，并选择其中LRU的那个，那么你可以改变这个key样本的数量。</li></ul><p><strong>十、Redis AOF持久化相关配置</strong></p><ul><li>appendonly no #如果是yes，则开启aof持久化</li><li>appendfilename “appendonly.aof” #指定aof文件名字，保存在dir参数指定的命令</li><li>appendfsync everysec #指定fsync()调用模式，有三种no(不调用fsync)，always（每次写都会调用fsync)，exerysec(每秒钟调用一次fsync)。第一种最快，第二种数据最安全，但性能会差一些，默认为第三种方案，性能和安全兼顾。</li><li>no-appendfsync-on-rewrite no #使用no可避免当写入量非常大时的磁盘IO阻塞</li><li>auto-aof-rewrite-percentage 10 #规定什么情况下触发aof重写。该值为一个比例，10表示当aof文件增幅达到10%时则会触发重写机制</li><li>auto-aof-rewrite-min-size 64mb #重写会有一个条件，就是不能低于64MB</li></ul><p><strong>十一、Redis慢日志相关配置</strong></p><ul><li>针对慢日志，你可以设置两个参数，一个是执行时长，单位是微秒，另一个是慢日志的长度。当一个新的命令被写入日志时，最老的一条会从命令日志队列中被移除。</li><li>slowlog-log-slower-than 10000 #慢于10000ms则记录日志</li><li>slowlog-max-len 128 #日志长度</li></ul><p><strong>十二、Redis主从配置</strong></p><ol><li>分别按照之前介绍的步骤安装好redis并启动</li><li>master 配置文件不用动</li><li>slave配置文件上加一行:slaveof 192.168.1.200 6379</li><li>masterauth szk  #如果主上设置了密码，要加这行</li><li>分别启动master和slave<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tail /usr/local/redis/var/redis.log </span><br><span class="line"></span><br><span class="line">3966] 18 Feb 15:02:58.330 * MASTER &lt;-&gt; SLAVE sync: receiving 192 bytes from master</span><br><span class="line">[3966] 18 Feb 15:02:58.330 * MASTER &lt;-&gt; SLAVE sync: Flushing old data</span><br><span class="line">[3966] 18 Feb 15:02:58.330 * MASTER &lt;-&gt; SLAVE sync: Loading DB in memory</span><br><span class="line">[3966] 18 Feb 15:02:58.330 * MASTER &lt;-&gt; SLAVE sync: Finished with success</span><br><span class="line">[3966] 18 Feb 15:03:03.344 - DB 0: 7 keys (0 volatile) in 8 slots HT.</span><br><span class="line">[3966] 18 Feb 15:03:03.344 - 1 clients connected (0 slaves), 466840 bytes in use</span><br><span class="line">[3966] 18 Feb 15:03:08.396 - DB 0: 7 keys (0 volatile) in 8 slots HT.</span><br><span class="line">[3966] 18 Feb 15:03:08.397 - 1 clients connected (0 slaves), 466848 bytes in use</span><br></pre></td></tr></table></figure></li></ol><p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -a szk      #主</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set key1 szk</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1            </span><br><span class="line">&quot;szk&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli             #从</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;szk&quot;</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>十三、Redis主从其他相关配置</strong></p><ul><li>slave-read-only yes #让从只读</li><li>repl-ping-slave-period 10  #设置slave向master发起ping的频率，每10s发起一次</li><li>repl-timeout 60  #设置slave ping不同master多少s后就超时</li><li>repl-disable-tcp-nodelay no  #是否开启tcp_nodeay，开启后将会使用更少的带宽，但会有延迟，所以建议关闭</li><li>repl-backlog-size 1mb  #同步队列的长度，backuplog是master的一个缓冲区，主从断开后，master会先把数据写到缓冲区，slave再次连接会从缓冲区中同步数据</li><li>repl-backlog-ttl 3600  #主从断开后，缓冲区的有效期，默认1小时</li><li>slave-priority 100  #多个slave是可以设置优先级的，数值越小优先级越高，应用于集群中，支持slave切换为mster，优先级最高的才会切换</li><li>min-slave-to-write 3 #和下面的一起使用，它的意思是master发现有超过3个slave的延迟高于10s，那么master就会暂时停止写操作。这两个数值任何一个为0，则关闭该功能，默认第一数值是0</li><li>min-slaves-max-log 10 </li></ul><p><strong>十四、string常用操作</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key1 szk  #给key1赋值为szk</span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; get key1    #获取这个值value</span><br><span class="line">&quot;szk&quot;</span><br><span class="line">127.0.0.1:6379&gt; set key1 yc  #一个key对应一个value，多次赋值，会覆盖前面的value</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1  </span><br><span class="line">&quot;yc&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setex key3 10 1   #用来给key设定过期时间,ttl key3查看时间</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; mset key1 1 key2 2 key3 3    #同时设置多个key</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget key1 key2 key3    </span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br></pre></td></tr></table></figure></p><p><strong>十五、Hash常用操作</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset hash1 name szk</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset hash1  age 23</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset hash1  job it</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall hash1 </span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;szk&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;23&quot;</span><br><span class="line">5) &quot;job&quot;</span><br><span class="line">6) &quot;it&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hmset hash2 name yc age 24 job teacher    #批量创建</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall hash2</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;yc&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;24&quot;</span><br><span class="line">5) &quot;job&quot;</span><br><span class="line">6) &quot;teacher&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hdel hash2 job     #删除某个值</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall hash2</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;yc&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;24&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hkeys hash2   #查看所有的key</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hvals hash2   #查看所有的values</span><br><span class="line">1) &quot;yc&quot;</span><br><span class="line">2) &quot;24&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hlen hash2    #查看hash有几个filed</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure></p><p><strong>十六、list常用操作</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 a    #从左边插入</span><br><span class="line"></span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lpush list1 b     #从左边插入</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lpush list1 c      #从左边插入</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1       #从左边往右罗列，最先插入在最后边</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpop list1          #从最左边取出</span><br><span class="line">&quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1    #从左边往右罗列</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpush list1 1          #从右边插入</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; rpush list1 2           #从右边插入</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; rpush list1 3           #从右边插入</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1       #从右往左罗列，最后插入在最后边</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; linsert list1  before 3  5        #在3前面插入一个5</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">6) &quot;3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lset list1 7 6             #将0开始的第7个元素换成6</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;456&quot;</span><br><span class="line">4) &quot;123&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;2&quot;</span><br><span class="line">7) &quot;5&quot;</span><br><span class="line">8) &quot;6&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lindex list1 7     #查看从0开始的第7个元素</span><br><span class="line">&quot;6&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; llen list1          #查看列表中有几个元素</span><br><span class="line">(integer) 8</span><br></pre></td></tr></table></figure></p><p><strong>十七、set数据常用操作 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd set1 1        #向集合set1中放入元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd set1 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd set1 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd set1 4</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers set1    #查看集合中所有元素</span><br><span class="line">1) &quot;zbc&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;szk&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">6) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop set1     #随机取出一个元素，删除</span><br><span class="line">&quot;szk&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sdiff set1 seta       #比较差集，以set1为主来比较</span><br><span class="line">1) &quot;zbc&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sdiffstore set3  seta set1   #比较差集，将结果存入set3中</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set3    #tab自动补全，但显示为大写</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;szk&quot;</span><br></pre></td></tr></table></figure></p><p><strong>十八、zset常用操作</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset1 1 abc     #创建有序集合</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zset1 10 aabc   #创建有序集合</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zset1 5 aaa    #创建有序集合</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zset1 88 bbb   #创建有序集合</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zset1 888 szk   #创建有序集合</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 -1   #显示所有元素，按顺序显示</span><br><span class="line">1) &quot;abc&quot;</span><br><span class="line">2) &quot;aaa&quot;</span><br><span class="line">3) &quot;aabc&quot;</span><br><span class="line">4) &quot;bbb&quot;</span><br><span class="line">5) &quot;szk&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 -1 withscores    #可以带上分值</span><br><span class="line">1) &quot;abc&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;aaa&quot;</span><br><span class="line">4) &quot;5&quot;</span><br><span class="line">5) &quot;aabc&quot;</span><br><span class="line">6) &quot;10&quot;</span><br><span class="line">7) &quot;bbb&quot;</span><br><span class="line">8) &quot;88&quot;</span><br><span class="line">9) &quot;szk&quot;</span><br><span class="line">10) &quot;888&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZREM zset1 abc       #删除指定元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 -1 withscores</span><br><span class="line">1) &quot;aaa&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;aabc&quot;</span><br><span class="line">4) &quot;10&quot;</span><br><span class="line">5) &quot;bbb&quot;</span><br><span class="line">6) &quot;88&quot;</span><br><span class="line">7) &quot;szk&quot;</span><br><span class="line">8) &quot;888&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrevrank zset1 szk  #返回元素的索引值，索引值从0开始，按score正向排序</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zrank zset1 szk     #同上，不同的是，按score反序排序</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZCARD  zset1   #查看集合元素的个数</span><br><span class="line">(integer) 4 </span><br><span class="line">127.0.0.1:6379&gt; zcount zset1 1 20   #查看分值区间内的元素个数</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore zset1 1 100 withscores   #返回分支范围在1-100的元素</span><br><span class="line">1) &quot;aaa&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;aabc&quot;</span><br><span class="line">4) &quot;10&quot;</span><br><span class="line">5) &quot;bbb&quot;</span><br><span class="line">6) &quot;88&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore zset1 0 10    #删除分支范围在0-10的元素，按score排序</span><br><span class="line">1) &quot;aaa&quot;</span><br><span class="line">2) &quot;aabc&quot;</span><br></pre></td></tr></table></figure></p><p><strong>十九、键值和服务器命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *            #列出所有键值</span><br><span class="line">1) &quot;key3&quot;</span><br><span class="line">2) &quot;seta&quot;</span><br><span class="line">3) &quot;hash1&quot;</span><br><span class="line">4) &quot;list1&quot;</span><br><span class="line">5) &quot;key2&quot;</span><br><span class="line">6) &quot;zset1&quot;</span><br><span class="line">7) &quot;mset2&quot;</span><br><span class="line">8) &quot;set2&quot;</span><br><span class="line">9) &quot;set1&quot;</span><br><span class="line">10) &quot;key1&quot;</span><br><span class="line">11) &quot;hash2&quot;</span><br><span class="line">12) &quot;set3&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys key*</span><br><span class="line">1) &quot;key3&quot;</span><br><span class="line">2) &quot;key2&quot;</span><br><span class="line">3) &quot;key1&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EXISTS list1      #查看是否有list1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del key1      #删除key1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EXPIRE key3 10     #设置过期时间</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get key3</span><br><span class="line">&quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl key3    #查看key的过期时间，-1不存在过期  -2不存储键值</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; EXists key3 </span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; select 0     #切换库，默认16个库</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[1]&gt; set key1 111   #新建一个键值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">127.0.0.1:6379[1]&gt; move set1 2    #移动到库2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[1]&gt; select 2     #切换库2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; keys *    </span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[2]&gt; EXPIRE key1 200    #设置过期时间</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; ttl key1</span><br><span class="line">(integer) 193</span><br><span class="line">127.0.0.1:6379[2]&gt; PERSIST key1     #取消过期时间</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; ttl key1</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379[2]&gt; RANDOMKEY    #随机返回一个key</span><br><span class="line">&quot;key1&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[2]&gt; RENAME key1 szk   #更改一个key的名字</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; keys *</span><br><span class="line">1) &quot;szk&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; type szk         #查看一个键值的类型</span><br><span class="line">string</span><br></pre></td></tr></table></figure></p><p><strong>二十、服务相关的操作</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; DBSIZE    #查看一个库的键值数</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DBSIZE </span><br><span class="line">(integer) 10</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; info   #查看redis服务信息</span><br><span class="line"># Server</span><br><span class="line">redis_version:2.8.21</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">略</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; flushdb    #清空当前数据库中所有的键</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; flushall   #清空所有数据库中的所有的key</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure></p><p><strong>二十一、PHP中应用Redis</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget  http://pecl.php.net/get/redis-2.2.5.tgz</span><br><span class="line">tar xf redis-2.2.5.tgz</span><br><span class="line">cd redis-2.2.5</span><br><span class="line">/usr/local/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-confi</span><br><span class="line">make ; make install</span><br><span class="line">mv /usr/local/php/lib/php/extensions/no-debug-zts-20100525/redis.so /usr/lib64/</span><br><span class="line"></span><br><span class="line">vim /usr/local/php/php.ini</span><br><span class="line"></span><br><span class="line">extension_dir = /usr/lib64/</span><br><span class="line">extension = redis.so</span><br><span class="line"></span><br><span class="line">usr/local/php/bin/php -m | grep redis</span><br><span class="line">redis</span><br></pre></td></tr></table></figure></p><p>加载成功，可以重启 nginx 看看 phpinfo 页</p><p><strong>二十二、Redis实现session共享</strong><br>php.ini中加入<br>session.save_handler = “redis”<br>session.save_path = “tcp://127.0.0.1:6379”<br>或者apache虚拟主机加入<br>php_value session.save_handler “redis”<br>php_value session.save_path “tcp://127.0.0.1:6379”<br>或者php-fpm.conf对应的pool中加入<br>php_value[session.save_handler] = redis<br>php_value[session.save_path] = “ tcp://127.0.0.1:6379 “</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一、Redis介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis是一个key-value存储系统，官方站点&lt;a href=&quot;http://redis.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://redis.i
      
    
    </summary>
    
      <category term="redis" scheme="http://grapedlinux.cn/categories/redis/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>nginx+tomcat 配置负载均衡集群</title>
    <link href="http://grapedlinux.cn/2017/04/04/17040401/"/>
    <id>http://grapedlinux.cn/2017/04/04/17040401/</id>
    <published>2017-04-04T02:38:51.000Z</published>
    <updated>2017-04-04T03:40:09.996Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、Hello-world"><a href="#一、Hello-world" class="headerlink" title="一、Hello world"></a>一、Hello world</h5><h6 id="1、前期环境准备"><a href="#1、前期环境准备" class="headerlink" title="1、前期环境准备"></a>1、前期环境准备</h6><ol><li>准备两个解压版tomcat，如何同时启动两个tomcat，方法如下：<br>首先去<a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">apache tomcat官网</a>下载一个tomcat解压版。<img src="https://static.oschina.net/uploads/space/2017/0328/160127_sJXZ_3203872.png" alt="image"><br>解压该压缩包，生成n份tomcat 分别命名为 tomcat1，tomcat2，<br><img src="https://static.oschina.net/uploads/space/2017/0328/160419_P4o4_3203872.png" alt="image"><br>然后修改server.xml配置文件，分别进入tomcat/conf/目录，修改server.xml，一共三处。<br><img src="https://static.oschina.net/uploads/space/2017/0328/160549_uR0Y_3203872.png" alt="image"><br>第一处：<br><img src="https://static.oschina.net/uploads/space/2017/0329/094952_RXZx_3203872.png" alt="image"><br>第二处、tomcat访问端口号：<br><img src="https://static.oschina.net/uploads/space/2017/0329/095118_fqsy_3203872.png" alt="image"><br>第三处：<br><img src="https://static.oschina.net/uploads/space/2017/0329/095239_9NmQ_3203872.png" alt="image"><br>之后修改bin下的启动文件<br>分别进入tomcat/bin目录，修改 startup.bat<br>在文件第一行添加如下配置（添加时删除#注释，在startup.bat文件中rem代表注释）：在文件第一行添加如下配置（添加时删除#注释，在startup.bat文件中rem代表注释）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># tomcat名称</span><br><span class="line">set TITLE=&quot;tomcat1&quot;</span><br><span class="line"># tomcat启动路径</span><br><span class="line">set CATALINA_BASE=&quot;D:\tools\tomcat1&quot;</span><br><span class="line">set CATALINA_HOME=&quot;D:\tools\tomcat1&quot;</span><br><span class="line"># JDK所在路径，如果环境变量已经配置，则可忽略，前提是你所有tomcat要共用一个jdk。另外如果设置，此处路径不能有空格</span><br><span class="line">SET JAVA_HOME=&quot;D:\Java\jdk1.7.0_45&quot;</span><br></pre></td></tr></table></figure></li></ol><p>如图：<br><img src="https://static.oschina.net/uploads/space/2017/0329/170630_Ttmb_3203872.png" alt="image"><br><img src="https://static.oschina.net/uploads/space/2017/0329/171827_v9qA_3203872.png" alt="image"><br>启动tomcat<br>平常直接双击startup.bat即可，但是为了查看配置信息，可以在cmd中启动，如下图：<br><img src="https://static.oschina.net/uploads/space/2017/0329/171214_rx4B_3203872.png" alt="image"><br>访问tomcat<br>在浏览器地址栏输入：<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 和 <a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a><br><img src="https://static.oschina.net/uploads/space/2017/0329/171320_bKZP_3203872.png" alt="image"></p><ol start="2"><li><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx官网</a>下载解压版nginx。</li><li>创建一个简单的web项目。为了直观的区分访问的哪个tomcat，在页面写上标记8081、8082。<img src="https://static.oschina.net/uploads/space/2017/0330/102251_yVyP_3203872.png" alt="image"></li><li>分别部署到对应的tomcat下。如图：<img src="https://static.oschina.net/uploads/space/2017/0330/104335_4Scb_3203872.png" alt="image"><h6 id="2、配置nginx"><a href="#2、配置nginx" class="headerlink" title="2、配置nginx"></a>2、配置nginx</h6>进入nginx-1.10.1\conf路径，修改配置文件nginx.conf。</li><li><p>配置服务器组，在http{}节点之间添加upstream配置。（注意不要写localhost，不然访问速度会很慢）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream nginxDemo &#123;</span><br><span class="line">    server 127.0.0.1:8081;   #服务器地址1</span><br><span class="line">    server 127.0.0.1:8082;   #服务器地址2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改nginx监听的端口号80，改为8080。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在location{}中，利用proxy_pass配置反向代理地址；此处“http://”不能少，后面的地址要和第一步upstream定义的名称保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http://nginxDemo; #配置方向代理地址</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>如下图：<br><img src="https://static.oschina.net/uploads/space/2017/0330/113528_YZCP_3203872.png" alt="image"></p><h6 id="3、启动nginx和tomcat，访问"><a href="#3、启动nginx和tomcat，访问" class="headerlink" title="3、启动nginx和tomcat，访问"></a>3、启动nginx和tomcat，访问</h6><p>我是Windows系统，所以直接在nginx-1.10.1目录下双击nginx.exe即可。可在任务管理器中查看：<br><img src="https://static.oschina.net/uploads/space/2017/0330/113005_QuQG_3203872.png" alt="image"><br>最后在浏览器输入地址：<a href="http://localhost:8080/nginxDemo/index.jsp，每次访问就会轮流访问tomcat了（如果F5刷新不管用，建议试试鼠标指针放到地址栏，点击Enter键）。" target="_blank" rel="noopener">http://localhost:8080/nginxDemo/index.jsp，每次访问就会轮流访问tomcat了（如果F5刷新不管用，建议试试鼠标指针放到地址栏，点击Enter键）。</a><br><img src="https://static.oschina.net/uploads/space/2017/0330/112827_dFRT_3203872.png" alt="image"><br><img src="https://static.oschina.net/uploads/space/2017/0330/112757_RGPA_3203872.png" alt="image"><br>到这里，一个非常简单的负载均衡就配置完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一、Hello-world&quot;&gt;&lt;a href=&quot;#一、Hello-world&quot; class=&quot;headerlink&quot; title=&quot;一、Hello world&quot;&gt;&lt;/a&gt;一、Hello world&lt;/h5&gt;&lt;h6 id=&quot;1、前期环境准备&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
      <category term="负载均衡" scheme="http://grapedlinux.cn/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="nginx,java" scheme="http://grapedlinux.cn/tags/nginx-java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx主要应用场景</title>
    <link href="http://grapedlinux.cn/2017/04/03/17040301/"/>
    <id>http://grapedlinux.cn/2017/04/03/17040301/</id>
    <published>2017-04-03T03:23:42.000Z</published>
    <updated>2017-04-03T03:26:42.397Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本文只针对Nginx在不加载第三方模块的情况能处理哪些事情，由于第三方模块太多所以也介绍不完，当然本文本身也可能介绍的不完整，毕竟只是我个人使用过和了解到过得。所以还请见谅，同时欢迎留言交流。</p><h4 id="Nginx能做什么"><a href="#Nginx能做什么" class="headerlink" title="Nginx能做什么"></a>Nginx能做什么</h4><h5 id="1-反向代理"><a href="#1-反向代理" class="headerlink" title="1. 反向代理"></a>1. 反向代理</h5><h5 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h5><h5 id="3-HTTP服务器（包含动静分离）"><a href="#3-HTTP服务器（包含动静分离）" class="headerlink" title="3. HTTP服务器（包含动静分离）"></a>3. HTTP服务器（包含动静分离）</h5><h5 id="4-正向代理"><a href="#4-正向代理" class="headerlink" title="4. 正向代理"></a>4. 正向代理</h5><p>以上就是我了解到的Nginx在不依赖第三方模块能处理的事情，下面详细说明每种功能怎么做。</p><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><p>反向代理应该是Nginx做的最多的一件事了，什么是反向代理呢，以下是百度百科的说法：反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。 下面贴上一段简单的实现反向代理的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">        listen       80;                                                         </span><br><span class="line">        server_name  localhost;                                               </span><br><span class="line">        client_max_body_size 1024M;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:8080;</span><br><span class="line">            proxy_set_header Host $host:$server_port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>保存配置文件后启动Nginx，这样当我们访问localhost的时候，就相当于访问localhost:8080了。</p><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。而Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。</p><h6 id="1、RR（默认）"><a href="#1、RR（默认）" class="headerlink" title="1、RR（默认）"></a>1、RR（默认）</h6><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<br>简单配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">     server localhost:8080;</span><br><span class="line">     server localhost:8081;</span><br><span class="line"> &#125;</span><br><span class="line"> server &#123;</span><br><span class="line">     listen       81;                                                         </span><br><span class="line">     server_name  localhost;                                               </span><br><span class="line">     client_max_body_size 1024M;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         proxy_pass http://test;</span><br><span class="line">         proxy_set_header Host $host:$server_port;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>负载均衡的核心代码为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存啊在的,也就是说访问不到，但是我们访问<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a> 的时候,也不会有问题，会默认跳转到<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置。</p><h6 id="2、权重"><a href="#2、权重" class="headerlink" title="2、权重"></a>2、权重</h6><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">    server localhost:8080 weight=9;</span><br><span class="line">    server localhost:8081 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么10次一般只会有1次会访问到8081，而有9次会访问到8080</p><h6 id="3、ip-hash"><a href="#3、ip-hash" class="headerlink" title="3、ip_hash"></a>3、ip_hash</h6><p>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="4、fair（第三方）"><a href="#4、fair（第三方）" class="headerlink" title="4、fair（第三方）"></a>4、fair（第三方）</h6><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    fair; </span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="5、url-hash（第三方）"><a href="#5、url-hash（第三方）" class="headerlink" title="5、url_hash（第三方）"></a>5、url_hash（第三方）</h6><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    hash $request_uri; </span><br><span class="line">    hash_method crc32; </span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式,不过fair和url_hash需要安装第三方模块才能使用，由于本文主要介绍Nginx能做的事情，所以Nginx安装第三方模块不会再本文介绍</p><h5 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h5><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现，首先看看Nginx做静态资源服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;                                                         </span><br><span class="line">       server_name  localhost;                                               </span><br><span class="line">       client_max_body_size 1024M;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">              root   e:\wwwroot;</span><br><span class="line">              index  index.html;</span><br><span class="line">          &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这样如果访问<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a> 就会默认访问到E盘wwwroot目录下面的index.html，如果一个网站只是静态页面的话，那么就可以通过这种方式来实现部署。</p><h5 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h5><p>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">upstream test&#123;  </span><br><span class="line">       server localhost:8080;  </span><br><span class="line">       server localhost:8081;  </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    server &#123;  </span><br><span class="line">        listen       80;  </span><br><span class="line">        server_name  localhost;  </span><br><span class="line"></span><br><span class="line">        location / &#123;  </span><br><span class="line">            root   e:\wwwroot;  </span><br><span class="line">            index  index.html;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        # 所有静态请求都由nginx处理，存放目录为html  </span><br><span class="line">        location ~ \.(gif|jpg|jpeg|png|bmp|swf|css|js)$ &#123;  </span><br><span class="line">            root    e:\wwwroot;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        # 所有动态请求都转发给tomcat处理  </span><br><span class="line">        location ~ \.(jsp|do)$ &#123;  </span><br><span class="line">            proxy_pass  http://test;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;  </span><br><span class="line">        location = /50x.html &#123;  </span><br><span class="line">            root   e:\wwwroot;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就可以吧HTML以及图片和css以及js放到wwwroot目录下，而tomcat只负责处理jsp和请求，例如当我们后缀为gif的时候，Nginx默认会从wwwroot获取到当前请求的动态图文件返回，当然这里的静态文件跟Nginx是同一台服务器，我们也可以在另外一台服务器，然后通过反向代理和负载均衡配置过去就好了，只要搞清楚了最基本的流程，很多配置就很简单了，另外localtion后面其实是一个正则表达式，所以非常灵活</p><h5 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h5><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理，但是目前Nginx有一个问题，那么就是不支持HTTPS，虽然我百度到过配置HTTPS的正向代理，但是到最后发现还是代理不了，当然可能是我配置的不对，所以也希望有知道正确方法的同志们留言说明一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">resolver 114.114.114.114 8.8.8.8;</span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    resolver_timeout 5s;</span><br><span class="line"></span><br><span class="line">    listen 81;</span><br><span class="line"></span><br><span class="line">    access_log  e:\wwwroot\proxy.access.log;</span><br><span class="line">    error_log   e:\wwwroot\proxy.error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>resolver是配置正向代理的DNS服务器，listen 是正向代理的端口，配置好了就可以在ie上面或者其他代理插件上面使用服务器ip+端口号进行代理了。</p><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>Nginx是支持热启动的，也就是说当我们修改配置文件后，不用关闭Nginx，就可以实现让配置生效，当然我并不知道多少人知道这个，反正我一开始并不知道，导致经常杀死了Nginx线程再来启动。。。Nginx从新读取配置的命令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>windows下面就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;本文只针对Nginx在不加载第三方模块的情况能处理哪些事情，由于第三方模块太多所以也介绍不完，当然本文本身也可能介绍的不完整，毕竟只是我个人
      
    
    </summary>
    
      <category term="nginx" scheme="http://grapedlinux.cn/categories/nginx/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix安装配置</title>
    <link href="http://grapedlinux.cn/2017/04/02/17040202/"/>
    <id>http://grapedlinux.cn/2017/04/02/17040202/</id>
    <published>2017-04-02T14:31:38.000Z</published>
    <updated>2017-04-03T01:43:56.117Z</updated>
    
    <content type="html"><![CDATA[<h6 id="zabbix安装配置"><a href="#zabbix安装配置" class="headerlink" title="zabbix安装配置"></a>zabbix安装配置</h6><p>安装zabbix<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></p><p>安装rpm包的lamp环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y  httpd mysql mysql-libs php php-mysql mysql-server php-bcmath php-gd php-mbstring</span><br></pre></td></tr></table></figure></p><p>安装zabbix服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install  zabbix20 zabbix20-agent zabbix20-server  zabbix20-server-mysql zabbix20-web zabbix20-web-mysql net-snmp-devel</span><br></pre></td></tr></table></figure></p><p>启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/zabbix-server start; /etc/init.d/zabbix-agent start; /etc/init.d/httpd start;</span><br></pre></td></tr></table></figure></p><p>修改一下mysql配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf    //修改或增加如下内容</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure></p><p>启动mysql服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p><p>建库，导入数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -e  &quot;create database zabbix&quot;</span><br><span class="line">mysql -uroot -p --default-character-set=utf8 zabbix &lt; /usr/share/zabbix-mysql/schema.sql</span><br><span class="line">mysql -uroot -p --default-character-set=utf8 zabbix &lt; /usr/share/zabbix-mysql/images.sql</span><br><span class="line">mysql -uroot -p --default-character-set=utf8  zabbix &lt; /usr/share/zabbix-mysql/data.sql</span><br></pre></td></tr></table></figure></p><p>网页安装zabbix<br>浏览器访问 <a href="http://ip/zabbix" target="_blank" rel="noopener">http://ip/zabbix</a>, 默认会有“It is not safe to rely on the system‘s timezone settings ”这样的警告信息，需要vim /etc/php.ini 设置 date.timezone=“Asia/Shanghai”点next<br>解决相关的报错信息，点retry  (vim /etc/php.ini)<br>输入mysql相关信息, 首先要测试一下，如果不通过，则需要调试，测试通过后，点next<br>Name 写127.0.0.1，（可以自定义）点next，再点next，最后点finish<br>默认管理员账号密码为 admin:zabbix<br>这时会遇到“zabbix server is not running”这样的错误，需要编辑一下 /etc/zabbix/zabbix_server.conf ，配置DBUser, DBPassword<br>接入要监控的主机<br>在客户端上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install zabbix20-agent</span><br><span class="line">vim /etc/zabbix_agentd.conf </span><br><span class="line">//更改Server=服务端ip; </span><br><span class="line"></span><br><span class="line">ServerActive=0.0.0.0:10050</span><br><span class="line">Hostname=xxx</span><br></pre></td></tr></table></figure></p><p>启动客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etc/init.d/zabbix-agent start</span><br></pre></td></tr></table></figure></p><p>服务端上命令行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zabbix_get -s 客户端ip -p10050 -k &quot;system.hostname&quot;</span><br></pre></td></tr></table></figure></p><p>在web界面下，点”configuration” –&gt; “host” –&gt; 右上角点”Create Host”  其中host name,  visible name自定义，可以选择groups，这里默认即可，ip address 写入客户端ip<br>配置监控项目模板：点“templates”, 点add, 在弹出的小窗口中选择Template OS Linux, 然后点select, 最后点save<br>自定义templates<br>Zabbix自带了很多模板，模板中有很多监控项目，比如CPU、网卡、内存、进程等等。使用系统自带模板有点太多了，所以我们可以自定义模板。点configuration 选择 templates，点右上角的create template<br>Template name和Visible name  自定义，Groups 选择templates, 点save<br>然后我们去挑选一些项目拷贝到该模板下：比如我们找到Template OS Linux 点一下items,选择我们想要的项目，然后在下面选择copy selected to … 然后点go<br>Group 选择templates, 找到刚才我们自定义的templates,点copy<br>点configuration 选择 templates可以看到新建的templates中已经有刚刚我们copy的items了<br>我们可以使用和上面相同的方法自定义拷贝Triggers（触发器 ）,它用来设置告警的阀值，当然我们也可以自定义编辑它。<br>例如：<a href="http://ask.apelearn.com/question/8091" target="_blank" rel="noopener">监控客户端网卡流量</a><br>配置发邮件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install -y sendmail </span><br><span class="line">mkdir -p /home/zabbix/bin</span><br><span class="line">vim /home/zabbix/bin/baojing.sh //加入内容：</span><br><span class="line"></span><br><span class="line">#! /bin/bash</span><br><span class="line">echo &quot;$3&quot; |/bin/mail -s &quot;$2&quot; $1</span><br><span class="line">//保存退出后给予执行权限</span><br><span class="line">chmod +x /home/zabbix/bin/baojing.sh</span><br></pre></td></tr></table></figure></p><p>在zabbix_server.conf配置文件中，有参数AlertScriptsPath和ExternalScripts<br>AlertScriptsPath=/home/zabbix/bin/ —用户自定义的media types脚本<br>ExternalScripts=/home/zabbix/bin/ —用户自定义的检查的脚本（item）<br>这样才能找到你的脚本，因为你在frontend中只是输入脚本的名称，没有路径。<br>创建mediea types: “Administration” –&gt;”Media types”，点击右上角“Create Media Type”其中Description填”baojing” 或其它自定义名称，Type选择”Script”，Script填”baojing.sh”然后点”Save”.<br>创建user: “Adimistration” –&gt; “Users”在右上角，选择”Users”，点击”Create User”, alias: test1,自定义name和lastname password:123456;group 选择guest，回到上面点一下media,type 选择baojing，send to 写要发送邮件的邮箱，点add, 最后点save<br>创建action: “configuration” –&gt; actions,右上角“Create Actions”, Name自定义，我这里写”baojing”,其他默认，然后点右侧的“Operations”下的“New”按钮，“Operation Type”选择“Send message”，“Send Message to”选择一个或多个要发送消息的用户组，Send to Users选择我们之前新增的test1, “Send only to”选择baojing , 点一下add<br>最后点save。</p><p>扩展：<br><a href="http://zhujiangtao.blog.51cto.com/6387416/1313630" target="_blank" rel="noopener">zabbix历史记录乱码问题</a><br><a href="http://ask.apelearn.com/question/8090" target="_blank" rel="noopener">zabbix图形中乱码问题</a><br><a href="http://xianglinhu.blog.51cto.com/5787032/d-6" target="_blank" rel="noopener">Zabbix自定义监控脚本配置</a><br><a href="http://xianglinhu.blog.51cto.com/5787032/d-6" target="_blank" rel="noopener">Zabbix汇总</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;zabbix安装配置&quot;&gt;&lt;a href=&quot;#zabbix安装配置&quot; class=&quot;headerlink&quot; title=&quot;zabbix安装配置&quot;&gt;&lt;/a&gt;zabbix安装配置&lt;/h6&gt;&lt;p&gt;安装zabbix&lt;br&gt;&lt;figure class=&quot;highlight p
      
    
    </summary>
    
      <category term="monitor" scheme="http://grapedlinux.cn/categories/monitor/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Nagios 安装和配置</title>
    <link href="http://grapedlinux.cn/2017/04/02/17040201/"/>
    <id>http://grapedlinux.cn/2017/04/02/17040201/</id>
    <published>2017-04-01T16:35:21.000Z</published>
    <updated>2017-04-01T16:36:47.284Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Nagios-安装和配置"><a href="#Nagios-安装和配置" class="headerlink" title="Nagios 安装和配置"></a>Nagios 安装和配置</h5><p>Nagios官网:<a href="http://www.nagios.org" target="_blank" rel="noopener">http://www.nagios.org</a><br>实验环境：一台服务端（IP：192.168.0.200）；一台客户端（IP：192.168.0.201）。</p><h6 id="1-Nagios安装-服务端（192-168-0-200）"><a href="#1-Nagios安装-服务端（192-168-0-200）" class="headerlink" title="1. Nagios安装 - 服务端（192.168.0.200）"></a>1. Nagios安装 - 服务端（192.168.0.200）</h6><p>Centos6默认的yum源里没有nagios相关的rpm包，但是我们可以安装一个epel的扩展源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></p><p>然后安装nagios相关的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd nagios nagios-plugins nagios-plugins-all nrpe nagios-plugins-nrpe</span><br></pre></td></tr></table></figure></p><p>设置登录nagios后台的用户和密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c /etc/nagios/passwd nagiosadmin</span><br></pre></td></tr></table></figure></p><p>检测配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nagios -v /etc/nagios/nagios.cfg</span><br></pre></td></tr></table></figure></p><p>启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service httpd start; service nagios start</span><br></pre></td></tr></table></figure></p><p>浏览器访问： http:/192.168.0.200ip/nagios/</p><h6 id="2-Nagios安装-客户端（192-168-0-201）"><a href="#2-Nagios安装-客户端（192-168-0-201）" class="headerlink" title="2. Nagios安装 - 客户端（192.168.0.201）"></a>2. Nagios安装 - 客户端（192.168.0.201）</h6><p>在客户端机器上:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y nagios-plugins nagios-plugins-all nrpe nagios-plugins-nrpe </span><br><span class="line"></span><br><span class="line">vim /etc/nagios/nrpe.cfg</span><br><span class="line">找到“allowed_hosts=127.0.0.1” 改为 “allowed_hosts=127.0.0.1,192.168.0.200”</span><br><span class="line">找到” dont_blame_nrpe=0” 改为  “dont_blame_nrpe=1”</span><br></pre></td></tr></table></figure></p><p>启动客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nrpe start</span><br></pre></td></tr></table></figure></p><h6 id="3-监控中心（192-168-0-200）添加被监控主机（192-168-0-201）"><a href="#3-监控中心（192-168-0-200）添加被监控主机（192-168-0-201）" class="headerlink" title="3. 监控中心（192.168.0.200）添加被监控主机（192.168.0.201）"></a>3. 监控中心（192.168.0.200）添加被监控主机（192.168.0.201）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nagios/conf.d/</span><br><span class="line">vim 192.168.0.201.cfg                   //加入：</span><br><span class="line">define host&#123;</span><br><span class="line">        use                     linux-server            </span><br><span class="line">        host_name           192.168.0.201201</span><br><span class="line">        alias                       0.201</span><br><span class="line">        address                 192.168.0.201</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">define service&#123;</span><br><span class="line">        use                     generic-service</span><br><span class="line">        host_name               192.168.0.201</span><br><span class="line">        service_description     check_ping</span><br><span class="line">        check_command           check_ping!100.0,20%!200.0,50%</span><br><span class="line">        max_check_attempts 5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define service&#123;</span><br><span class="line">        use                     generic-service</span><br><span class="line">        host_name               192.168.0.201</span><br><span class="line">        service_description     check_ssh</span><br><span class="line">        check_command           check_ssh</span><br><span class="line">        max_check_attempts 5 ；当nagios检测到问题时，一共尝试检测5次都有问题才会告警，如果该数值为1，那么检测到问题立即告警</span><br><span class="line">        normal_check_interval 1 ；重新检测的时间间隔，单位是分钟，默认是3分钟</span><br><span class="line">        notification_interval 60 ；在服务出现异常后，故障一直没有解决，nagios再次对使用者发出通知的时间。单位是分钟。如果你认为，所有的事件只需要一次通知就够了，可以把这里的选项设为0。 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define service&#123;</span><br><span class="line">        use                     generic-service</span><br><span class="line">        host_name               192.168.0.201</span><br><span class="line">        service_description     check_http</span><br><span class="line">        check_command           check_http</span><br><span class="line">        max_check_attempts      5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上服务不依赖于客户端nrpe服务，我们可以想象，我们在自己电脑上可以使用ping或者telnet探测远程任何一台机器是否存活、是否开启某个端口或服务。 而当我们想要检测客户端上的某个具体服务的情况时，就需要借助于nrpe了，比如想知道客户端机器的负责或磁盘使用情况。</p><h6 id="4-继续添加服务"><a href="#4-继续添加服务" class="headerlink" title="4.  继续添加服务"></a>4.  继续添加服务</h6><p>服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/objects/commands.cfg</span><br><span class="line">//增加：</span><br><span class="line">    define command&#123;</span><br><span class="line">        command_name    check_nrpe</span><br><span class="line">        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>继续编辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/conf.d/192.168.0.12.cfg</span><br><span class="line">//增加如下内容：</span><br><span class="line"></span><br><span class="line">define service&#123;</span><br><span class="line">        use     generic-service</span><br><span class="line">        host_name       192.168.0.12</span><br><span class="line">        service_description     check_load</span><br><span class="line">        check_command           check_nrpe!check_load</span><br><span class="line">        max_check_attempts 5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define service&#123;</span><br><span class="line">        use     generic-service</span><br><span class="line">        host_name       192.168.0.12</span><br><span class="line">        service_description     check_disk_hda1</span><br><span class="line">        check_command           check_nrpe!check_hda1</span><br><span class="line">        max_check_attempts 5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define service&#123;</span><br><span class="line">        use     generic-service</span><br><span class="line">        host_name       192.168.0.12</span><br><span class="line">        service_description     check_disk_hda2</span><br><span class="line">        check_command           check_nrpe!check_hda2</span><br><span class="line">        max_check_attempts 5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明：<br>check_nrpe!check_load：这里的check_nrpe就是在commands.cfg刚刚定义的，check_load是远程主机上的一个检测脚本<br>在远程主机上vim /etc/nagios/nrpe.cfg 搜索check_load，这行就是在服务端上要执行的脚本了，我们可以手动执行这个脚本<br>把check_hda1更改一下：/dev/hda1 改为 /dev/sda1<br>再加一行command[check_hda2]=/usr/lib/nagios/plugins/check_disk -w 20% -c 10% -p /dev/sda2<br>客户端上重启一下nrpe服务:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nrpe restart</span><br></pre></td></tr></table></figure></p><p>服务端也重启一下nagios服务:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nagios restart</span><br></pre></td></tr></table></figure></p><h6 id="5-配置告警"><a href="#5-配置告警" class="headerlink" title="5.   配置告警"></a>5.   配置告警</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/objects/contacts.cfg </span><br><span class="line">//增加：</span><br><span class="line"></span><br><span class="line">define contact&#123;</span><br><span class="line">        contact_name               123</span><br><span class="line">        use                             generic-contact</span><br><span class="line">        alias                           aming</span><br><span class="line">        email              lishiming2009@139.com</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define contact&#123;</span><br><span class="line">        contact_name               456</span><br><span class="line">        use                             generic-contact</span><br><span class="line">        alias                            aaa</span><br><span class="line">        email              aminglinux@139.com</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define contactgroup&#123;</span><br><span class="line">        contactgroup_name           common</span><br><span class="line">        alias                                  common</span><br><span class="line">        members                          123,456</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>然后在要需要告警的服务里面加上contactgroup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define service&#123;</span><br><span class="line">        use     generic-service</span><br><span class="line">        host_name       192.168.0.12</span><br><span class="line">        service_description     check_load</span><br><span class="line">        check_command           check_nrpe!check_load</span><br><span class="line">        max_check_attempts 5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">        contact_groups        common</span><br><span class="line">        notifications_enabled  1    ；是否开启提醒功能。1为开启，0为禁用。一般，这个选项会在主配置文件（nagios.cfg）中定义，效果相同。</span><br><span class="line">        notification_period   24x7   ；发送提醒的时间段。非常重要的主机（服务）我定义为7×24，一般的主机（服务）就定义为上班时间。如果不在定义的时间段内，无论什么问题发生，都不会发送提醒。        </span><br><span class="line">        notification_options:w,u,c,r   ；这个是service的状态。w为waning， u为unknown, c为critical, r为recover(恢复了），类似的还有一个  host对应的状态：d,u,r   d = 状态为DOWN, u = 状态为UNREACHABLE , r = 状态恢复为OK，需要加入到host的定义配置里。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：<br><a href="http://www.aminglinux.com/bbs/thread-7380-1-1.html" target="_blank" rel="noopener">调用短信接口</a><br><a href="http://www.aminglinux.com/bbs/thread-7917-1-1.html" target="_blank" rel="noopener">整合微信</a></p><h6 id="6-配置图形显示-pnp4nagios"><a href="#6-配置图形显示-pnp4nagios" class="headerlink" title="6.   配置图形显示 pnp4nagios"></a>6.   配置图形显示 pnp4nagios</h6><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pnp4nagios rrdtool</span><br></pre></td></tr></table></figure></p><p>配置主配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/nagios.cfg  //修改如下配置</span><br><span class="line"></span><br><span class="line">process_performance_data=1   </span><br><span class="line">host_perfdata_command=process-host-perfdata</span><br><span class="line">service_perfdata_command=process-service-perfdata</span><br><span class="line">enable_environment_macros=1</span><br></pre></td></tr></table></figure></p><p>修改commands.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/objects/commands.cfg  //注释掉原有对process-host-perfdata和process-service-perfdata，重新定义</span><br><span class="line"></span><br><span class="line">define command &#123;  </span><br><span class="line">       command_name    process-service-perfdata  </span><br><span class="line">       command_line    /usr/bin/perl /usr/libexec/pnp4nagios/process_perfdata.pl  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">define command &#123;  </span><br><span class="line">       command_name    process-host-perfdata  </span><br><span class="line">       command_line    /usr/bin/perl /usr/libexec/pnp4nagios/process_perfdata.pl -d HOSTPERFDATA  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改配置文件templates.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/objects/templates.cfg define host &#123;</span><br><span class="line">        name       hosts-pnp</span><br><span class="line">        register   0</span><br><span class="line">        action_url /pnp4nagios/index.php/graph?host=$HOSTNAME$&amp;srv=_HOST_</span><br><span class="line">        process_perf_data               1</span><br><span class="line">&#125;</span><br><span class="line">define service &#123;</span><br><span class="line">        name       srv-pnp</span><br><span class="line">        register   0</span><br><span class="line">        action_url /pnp4nagios/index.php/graph?host=$HOSTNAME$&amp;srv=$SERVICEDESC$</span><br><span class="line">        process_perf_data               1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改host和service配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/conf.d/192.168.0.12.cfg </span><br><span class="line">把 “define host&#123;</span><br><span class="line">        use                     linux-server” </span><br><span class="line">改为：</span><br><span class="line">define host&#123;</span><br><span class="line">        use                     linux-server,hosts-pnp</span><br><span class="line"></span><br><span class="line">修改对应的service，比如</span><br><span class="line">把</span><br><span class="line">define service&#123;</span><br><span class="line">        use     generic-service</span><br><span class="line">        host_name       192.168.0.12</span><br><span class="line">        service_description     check_disk_hda1</span><br><span class="line">        check_command           check_nrpe!check_hda1</span><br><span class="line">        max_check_attempts 5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">&#125;</span><br><span class="line">改为：</span><br><span class="line">define service&#123;</span><br><span class="line">        use     generic-service,srv-pnp</span><br><span class="line">        host_name       192.168.0.12</span><br><span class="line">        service_description     check_disk_hda1</span><br><span class="line">        check_command           check_nrpe!check_hda1</span><br><span class="line">        max_check_attempts 5</span><br><span class="line">        normal_check_interval 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启和启动各个服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service nagios restart</span><br><span class="line">service httpd restart</span><br><span class="line">service npcd start</span><br></pre></td></tr></table></figure></p><p>两种访问方法：</p><p>ip/nagios/<br>ip/pnp4nagios/</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Nagios-安装和配置&quot;&gt;&lt;a href=&quot;#Nagios-安装和配置&quot; class=&quot;headerlink&quot; title=&quot;Nagios 安装和配置&quot;&gt;&lt;/a&gt;Nagios 安装和配置&lt;/h5&gt;&lt;p&gt;Nagios官网:&lt;a href=&quot;http://www.n
      
    
    </summary>
    
      <category term="monitor" scheme="http://grapedlinux.cn/categories/monitor/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS上搭建Git服务器</title>
    <link href="http://grapedlinux.cn/2017/04/01/17040102/"/>
    <id>http://grapedlinux.cn/2017/04/01/17040102/</id>
    <published>2017-04-01T08:43:10.000Z</published>
    <updated>2017-04-01T08:43:57.039Z</updated>
    
    <content type="html"><![CDATA[<p>Git是一个分布式版本控制软件，原来是linux内核开发者Linus Torvalds为了更好地管理linux内核开发而创立的。发展至今，Git已经成为了一个相当好用的版本管理工具。相比于SVN，如果想要保存一些微小的修改也必须得提交服务器保存才可以，这样使服务器的版本号过多，而Git解决了这个问题，一些小的修改只在本地提交即可，只需最后修改完成后再提交服务器。正是由于这样的便捷性，现在越来越多的社区项目都开始使用Git来取代SVN之类较为传统的版本管理工具进行开发。<br>使用CentOS搭建Git服务器是一件比较轻松的事儿，本次折腾主要涉及git, gitosis, gitweb的安装配置。其中，gitosis和gitweb是两种比较常用的方式，gitosis是以SSH方式访问和管理git， gitweb是通过http的方式访问和管理。利用这些工具即可满足Git服务器的基本功能。此外比较好的一点是，Git的管理工具几乎不会给服务器带来较大的性能压力。下面正式开始我们的Git安装配置记录。</p><h6 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装Git</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>然后进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd --home /home/git git</span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure></p><p>创建完用户后就可以切换到git用户下进行后面的设置，如用户名和邮箱：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">git config --global user.name &quot;somebody&quot;</span><br><span class="line">git config --global user.email &quot;somebody@example.com&quot;</span><br></pre></td></tr></table></figure></p><p>设置默认将会保存在~/.gitconfig文件中。<br>此时，Git的功能就已经可以使用了。为了方便后面的操作，可以先来创建一个空版本库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/repo</span><br></pre></td></tr></table></figure></p><p>然后建立项目目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/repo/huhamhire-hosts</span><br></pre></td></tr></table></figure></p><p>切换到项目目录，并进行初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/repo/huhamhire-hosts</span><br><span class="line">git init -bare</span><br></pre></td></tr></table></figure></p><p>至此，一个初始的空项目版本库就配置完成了，后面安装了gitosis之后便可向库中推送我们的代码库内容。</p><h6 id="二、安装gitosis"><a href="#二、安装gitosis" class="headerlink" title="二、安装gitosis"></a>二、安装gitosis</h6><p>在安装之前，可以看一下gitosis的实现原理：<br><a href="http://geeklu.com/2012/10/gitosis/" target="_blank" rel="noopener">浅谈Gitosis实现原理</a><br>先切换回root权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure></p><p>并先安装python-setuptool<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools</span><br></pre></td></tr></table></figure></p><p>然后开始安装gitosis，值得注意的是gitosis的安装程序本身就是由git管理的，需要使用git来获取。这里在/tmp目录下进行相关的安装操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">git clone https://github.com/res0nat0r/gitosis.git</span><br></pre></td></tr></table></figure></p><p>接下来进入下载的gitosis版本库进行安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd gitosis</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></p><p>安装完成后，便进入对gitosis的设置阶段。由于gitosis需要通过SSH进行管理，所以需要创建SSH密钥对，并将公钥放在服务器端，私钥放在客户端。一般的流程是客户端创建完密钥后，将公钥传到服务器上生效。不过，偷懒的话直接在服务器上操作问题也不大。</p><p>切换到git用户并建立文件夹.ssh：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir /home/git/.ssh</span><br></pre></td></tr></table></figure></p><p>一定记得，在客户机上生成公钥，上传到服务器，或者在服务器上生成，下载到客户机。<br>进入~/.ssh目录并使用ssh-keygen生成公钥：cd /home/git/.ssh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>注意不能忘记私钥的密码。默认会生成~/.ssh/id_rsa.pub公钥文件。<br>有了密钥以后便可初始化gitosis，使gitosis获得对Git的管理权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitosis-init &lt; /home/git/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>初始化之后，会在/home/git/repositories创建gitosis-admin.git项目，可以通过维护这个项目来对gitosis进行配置。<br>除此以外，还需要对gitosis-admin.git/hooks/post-update目录赋上特殊权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x /home/git/repositories/gitosis-admin.git/hooks/post-update</span><br></pre></td></tr></table></figure></p><p>至此，服务器端的gitosys配置就完成了。</p><h6 id="三、设置并使用gitosys"><a href="#三、设置并使用gitosys" class="headerlink" title="三、设置并使用gitosys"></a>三、设置并使用gitosys</h6><p>在服务器端完成了gitosys的配置之后，便可在客户端进行接下来的设置，以便使用Git服务器。<br>较为正规的做法是在客户端通过gitosis-admin版本库做管理设置，之后提交到服务器使项目权限生效，当然也可以使用操作系统的ssh登录方式进行验证，不过这里仅介绍前面一种方法。<br>在进行以下操作时，需要确认一下，你的公钥是不是已经放在客户机~/.ssh/目录下。如果你也在用github的话，那么你需要设置一下多公钥共存的东西。.ssh/config，在这个文件中写入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile C:/Users/abc/.ssh/id_rsa</span><br><span class="line">Host git.oschina.net</span><br><span class="line">    HostName git.oschina.net</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile C:/Users/abc/.ssh/id_rsa_a</span><br><span class="line">Host abc.ueder.info</span><br><span class="line">    HostName abc.ueder.info</span><br><span class="line">    User git</span><br><span class="line">    Port 1000</span><br><span class="line">    IdentityFile C:/Users/abc/.ssh/id_rsa_new</span><br></pre></td></tr></table></figure></p><p>如我就使用了好几个git服务，每个都有自己的公钥，需要配置文件来区分开来，并且我自己的服务器ssh端口已经不是默认端口，需要在配置文件中声明，否则在每次clone的时候要声明端口。<br>在客户机上下载gitosis-admin版本库，这里以linux客户机为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@VPS的IP/Domain:/home/git/repositories/gitosis-admin.git</span><br></pre></td></tr></table></figure></p><p>获取完成后对gitosis-admin/gitosis.conf文件进行设置，以上面新建的项目为例，新增：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[group huhamhire-hosts]</span><br><span class="line">writable = huhamhire-hosts</span><br><span class="line">members = hamhire@myhost</span><br></pre></td></tr></table></figure></p><p>随后要将客户端的公钥放到keydir目录下，并随后提交设置到服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.ssh/id_rsa.pub ~/gitosis-admin/keydir/hamhire@myhost.pub</span><br><span class="line">    </span><br><span class="line">cd ~/gitosis-admin</span><br><span class="line">git add ./</span><br><span class="line">git commit -a -m &quot;add new repo&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>由于之前已经在/home/git/repo/目录下设置了huhamhire-hosts的版本库位置，所以可以直接进行推送操作。<br>在本例中可以通过hamhire@myhost:/home/git/repo/huhamhire-hosts的路径来提交项目。<br>至此，gitosys的配置全部完成。</p><h6 id="四、安装gitweb"><a href="#四、安装gitweb" class="headerlink" title="四、安装gitweb"></a>四、安装gitweb</h6><p>在配置完成了git服务器以后，如果需要方便在线查看，使用gitweb来提供一个简单网页版的版本显示界面是一个不错的选择。<br>在centos 下安装gitweb如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install fcgi-devel</span><br><span class="line">    </span><br><span class="line">cd /usr/local/src/</span><br><span class="line">git clone git://github.com/gnosek/fcgiwrap.git</span><br><span class="line">cd fcgiwrap</span><br><span class="line">autoreconf -i</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>至此，fcgiwrap已经安装到 /usr/local/sbin/fcgiwrap<br>然后再安装spawn-fcgi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install spawn-fcgi</span><br></pre></td></tr></table></figure></p><p>安装好后:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/spawn-fcgi</span><br><span class="line"># 修改文件为：</span><br><span class="line"></span><br><span class="line"># You must set some working options before the &quot;spawn-fcgi&quot; service will work.</span><br><span class="line"># If SOCKET points to a file, then this file is cleaned up by the init script.</span><br><span class="line">#</span><br><span class="line"># See spawn-fcgi(1) for all possible options.</span><br><span class="line">#</span><br><span class="line"># Example :</span><br><span class="line">#SOCKET=/var/run/php-fcgi.sock</span><br><span class="line">#OPTIONS=&quot;-u apache -g apache -s $SOCKET -S -M 0600 -C 32 -F 1 -P /var/run/spawn-fcgi.pid -- /usr/bin/php-cgi&quot;</span><br><span class="line">FCGI_SOCKET=/var/run/fcgiwrap.socket</span><br><span class="line">FCGI_PROGRAM=/usr/local/sbin/fcgiwrap</span><br><span class="line">FCGI_USER=nginx</span><br><span class="line">FCGI_GROUP=nginx</span><br><span class="line">FCGI_EXTRA_OPTIONS=&quot;-M 0700&quot;</span><br><span class="line">OPTIONS=&quot;-u $FCGI_USER -g $FCGI_GROUP -s $FCGI_SOCKET -S $FCGI_EXTRA_OPTIONS -F 1 -P /var/run/spawn-fcgi.pid -- $FCGI_PROGRAM&quot;</span><br></pre></td></tr></table></figure></p><p>然后设置开机运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --levels 2345 spawn-fcgi on</span><br><span class="line">/etc/init.d/spawn-fcgi start</span><br></pre></td></tr></table></figure></p><p>这里已经完成了fcgi的安装运行。如果你用的nginx，还需要对nginx.conf进行配置，才能将.cgi的请求转发给fcgiwrap.socket<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location /cgi-bin/ &#123;</span><br><span class="line"> # Disable gzip (it makes scripts feel slower since they have to complete</span><br><span class="line"> # before getting gzipped)</span><br><span class="line"> gzip off;</span><br><span class="line"> # Set the root to /usr/lib (inside this location this means that we are</span><br><span class="line"> # giving access to the files under /usr/lib/cgi-bin)</span><br><span class="line"> root /var/www/www.example.com;</span><br><span class="line"> # Fastcgi socket</span><br><span class="line"> fastcgi_pass unix:/var/run/fcgiwrap.socket;</span><br><span class="line"> # Fastcgi parameters, include the standard ones</span><br><span class="line"> include /etc/nginx/fastcgi_params;</span><br><span class="line"> # Adjust non standard parameters (SCRIPT_FILENAME)</span><br><span class="line"> fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>最后重启nginx就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git是一个分布式版本控制软件，原来是linux内核开发者Linus Torvalds为了更好地管理linux内核开发而创立的。发展至今，Git已经成为了一个相当好用的版本管理工具。相比于SVN，如果想要保存一些微小的修改也必须得提交服务器保存才可以，这样使服务器的版本号过
      
    
    </summary>
    
      <category term="github" scheme="http://grapedlinux.cn/categories/github/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux监控之cacti</title>
    <link href="http://grapedlinux.cn/2017/04/01/17040101/"/>
    <id>http://grapedlinux.cn/2017/04/01/17040101/</id>
    <published>2017-04-01T05:56:18.000Z</published>
    <updated>2017-04-01T06:02:19.365Z</updated>
    
    <content type="html"><![CDATA[<p>cacti 重图形，有数据历史，需用到数据库支持，支持web配置，默认不支持告警，可以加插件。</p><h5 id="cacti安装配置"><a href="#cacti安装配置" class="headerlink" title="cacti安装配置"></a>cacti安装配置</h5><h6 id="1-首先要安装epel扩展源"><a href="#1-首先要安装epel扩展源" class="headerlink" title="1. 首先要安装epel扩展源"></a>1. 首先要安装epel扩展源</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install  epel-release</span><br></pre></td></tr></table></figure><h6 id="2-（lamp）然后分别安装httpd、php、mysql"><a href="#2-（lamp）然后分别安装httpd、php、mysql" class="headerlink" title="2. （lamp）然后分别安装httpd、php、mysql"></a>2. （lamp）然后分别安装httpd、php、mysql</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y  httpd php php-mysql mysql mysql-server mysql-devel php-gd  libjpeg libjpeg-devel libpng libpng-devel</span><br></pre></td></tr></table></figure><h6 id="3-安装cacti-net-snmp-rrdtool"><a href="#3-安装cacti-net-snmp-rrdtool" class="headerlink" title="3. 安装cacti  net-snmp  rrdtool"></a>3. 安装cacti  net-snmp  rrdtool</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y cacti  net-snmp  net-snmp-utils  rrdtool</span><br></pre></td></tr></table></figure><h6 id="4-启动服务："><a href="#4-启动服务：" class="headerlink" title="4. 启动服务："></a>4. 启动服务：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysqld start</span><br><span class="line">/etc/init.d/httpd  start</span><br><span class="line">/etc/init.d/snmpd start</span><br></pre></td></tr></table></figure><h6 id="5-编辑httpd配置文件"><a href="#5-编辑httpd配置文件" class="headerlink" title="5. 编辑httpd配置文件"></a>5. 编辑httpd配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf.d/cacti.conf  </span><br><span class="line"></span><br><span class="line"># 把&quot;Deny from all&quot; 改为  &quot;Allow from all&quot;</span><br><span class="line">/etc/init.d/httpd  restart</span><br></pre></td></tr></table></figure><h6 id="6-导入数据创建cacti库"><a href="#6-导入数据创建cacti库" class="headerlink" title="6.  导入数据创建cacti库"></a>6.  导入数据创建cacti库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot  -e &quot;create database cacti&quot; #创建数据库</span><br><span class="line">mysql -uroot -e &quot;grant all on cacti.* to &apos;cacti&apos;@&apos;127.0.0.1&apos; identified by &apos;cacti&apos;;&quot; #创建cacti用户</span><br><span class="line">mysql -uroot cacti &lt; /usr/share/doc/cacti-0.8.8b/cacti.sql #导入cacti文件</span><br></pre></td></tr></table></figure><h6 id="7-编辑cacti配置文件"><a href="#7-编辑cacti配置文件" class="headerlink" title="7.  编辑cacti配置文件"></a>7.  编辑cacti配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/cacti/include/config.php  更改如下：</span><br><span class="line">$database_type = &quot;mysql&quot;;</span><br><span class="line">$database_default = &quot;cacti&quot;;</span><br><span class="line">$database_name = &quot;cacti&quot;;</span><br><span class="line">$database_hostname = &quot;127.0.0.1&quot;;</span><br><span class="line">$database_username = &quot;cacti&quot;;</span><br><span class="line">$database_password = &quot;cacti&quot;;</span><br><span class="line">$database_port = &quot;3306&quot;;</span><br><span class="line">$database_ssl = false;</span><br></pre></td></tr></table></figure><h6 id="8-web访问cacti并安装"><a href="#8-web访问cacti并安装" class="headerlink" title="8. web访问cacti并安装"></a>8. web访问cacti并安装</h6><p><a href="http://192.168.209.131/cacti/" target="_blank" rel="noopener">http://192.168.209.131/cacti/</a><br>点两下“next” 和一次”Finish“ 即可<br>输入admin   admin 登录，重新设置新的密码</p><h6 id="9-执行poller-php-生成图形，-加入计划任务"><a href="#9-执行poller-php-生成图形，-加入计划任务" class="headerlink" title="9. 执行poller.php, 生成图形， 加入计划任务"></a>9. 执行poller.php, 生成图形， 加入计划任务</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/php /usr/share/cacti/poller.php添加cron任务</span><br><span class="line">//crontab -e  增加：</span><br><span class="line">*/5 * * * *  /usr/bin/php /usr/share/cacti/poller.php</span><br></pre></td></tr></table></figure><p>以下10-12步骤在客户端机器上操作</p><h6 id="10-安装snmp"><a href="#10-安装snmp" class="headerlink" title="10. 安装snmp"></a>10. 安装snmp</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y net-snmp</span><br></pre></td></tr></table></figure><h6 id="11-修改snmpd-conf"><a href="#11-修改snmpd-conf" class="headerlink" title="11. 修改snmpd.conf"></a>11. 修改snmpd.conf</h6><p>修改syslocation以及syscontact, 其中syslocation 可以写本机ip，syscontact写管理员邮箱<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">syslocation 192.168.209.131</span><br><span class="line">syscontact Root graped@aliyun.com</span><br></pre></td></tr></table></figure></p><h6 id="12-启动snmp"><a href="#12-启动snmp" class="headerlink" title="12. 启动snmp"></a>12. 启动snmp</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service  snmpd  start</span><br></pre></td></tr></table></figure><h6 id="13-登录cacti管理后台，点console-再点Device，-在右上角点”Add“"><a href="#13-登录cacti管理后台，点console-再点Device，-在右上角点”Add“" class="headerlink" title="13.  登录cacti管理后台，点console , 再点Device， 在右上角点”Add“"></a>13.  登录cacti管理后台，点console , 再点Device， 在右上角点”Add“</h6><p>Description  写本机ip或你自定义一个名字<br>Hostname  写本机ip<br>Host Template  选ucd/net  SNMP Host<br>SNMP Version  选Version 2<br>点右下角的create<br>点右上角的”Create Graphs for this Host“<br>Graph Types:  选择SNMP - Interface Statistics<br>在下面框中选择要监控的网卡，比如我选择eth0, 在最右侧小方块里打对勾，然后点右下角的create<br>（如果在这一步找不到网卡，可以根据这个帖子修改配置文件：<a href="http://ask.apelearn.com/question/8089" title="cacti监控找到网卡的方法" target="_blank" rel="noopener">cacti监控找到网卡的方法</a>）<br>Graph Types:  再选择 Graph Template Based<br>在下面的框中，选择你要监控的项目，比如ucd/net - Load Average<br>在右侧小方块中打对勾，然后点右下角的create</p><h6 id="14-点左侧的Graph-Trees"><a href="#14-点左侧的Graph-Trees" class="headerlink" title="14. 点左侧的Graph Trees"></a>14. 点左侧的Graph Trees</h6><p>选中”Default Tree“<br>点右上角的Add<br>Tree Item Type 选择 ”Host“<br>Host 选择我们刚刚增加的那个机器ip<br>点右下角的create</p><h6 id="15-点左上角的Graphs"><a href="#15-点左上角的Graphs" class="headerlink" title="15. 点左上角的Graphs"></a>15. 点左上角的Graphs</h6><p>在左侧可以看到<br>Defaut Tree下面已经增加了我们刚刚添加的主机，图形一开始不会那么快出来，要等一小会才可以。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cacti 重图形，有数据历史，需用到数据库支持，支持web配置，默认不支持告警，可以加插件。&lt;/p&gt;
&lt;h5 id=&quot;cacti安装配置&quot;&gt;&lt;a href=&quot;#cacti安装配置&quot; class=&quot;headerlink&quot; title=&quot;cacti安装配置&quot;&gt;&lt;/a&gt;cact
      
    
    </summary>
    
      <category term="monitor" scheme="http://grapedlinux.cn/categories/monitor/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 的负载均衡集群</title>
    <link href="http://grapedlinux.cn/2017/03/30/17033001/"/>
    <id>http://grapedlinux.cn/2017/03/30/17033001/</id>
    <published>2017-03-30T12:14:57.000Z</published>
    <updated>2017-03-30T12:24:25.295Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Nginx-的负载均衡集群"><a href="#Nginx-的负载均衡集群" class="headerlink" title="Nginx 的负载均衡集群"></a>Nginx 的负载均衡集群</h5><p>Nginx的负载均衡和lvs相比，Nginx属于更高级的应用层，不会牵扯到IP和内核的改动，它只是单纯的把用户的请求转发到后面的机器上。这就意味着：后端的RS不需要配置公网IP。</p><h6 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h6><p>Nginx分发器（公网IP：192.168.0.161；内网IP：192.168.209.131）<br>RS1：只有内网，IP为：192.168.209.132<br>RS2：只有内网，IP为：192.168.209.133</p><h6 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h6><p>在nginx分发器上编辑配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhosts/lb.conf</span><br><span class="line">#加入以下内容</span><br><span class="line">upstream graped &#123;</span><br><span class="line">ip_hash;</span><br><span class="line">        server 192.168.209.132:80;</span><br><span class="line">        server 192.168.209.133:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.123.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass      http://graped/;</span><br><span class="line">                proxy_set_header Host   $host;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>说明：</p><p>upstream用来定义后端的RS，可以只写一个。ip_bash 为nginx的一种调度算法，加上这一行后会达到这样的效果：即一个用户的请求会始终被分发到固定的一个RS上。这样的好处是：可以避免吧同一个用户的请求分发到不同的机器上面而导致session丢失的情况。upstream里面，RS后面的IP后面还可以加权重，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server 192.168.209.132:80 weight=100</span><br></pre></td></tr></table></figure></p><p>还需要注意的是，upstream后面的graped是自定义的一个名字，可以随便写，唯一的要求是要和后面的proxy_pass后面保持一致。</p><p>另外：<br>还可以根据访问的目录来区分后端Web，请参考：nginx代理扩展：<br><a href="http://note.youdao.com/noteshare?id=6123c1559f821ab895eef6bab5174c77&amp;sub=4ECC2219D20C4C0CA2B4266E060AF30D" target="_blank" rel="noopener">根据目录区分后端web</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Nginx-的负载均衡集群&quot;&gt;&lt;a href=&quot;#Nginx-的负载均衡集群&quot; class=&quot;headerlink&quot; title=&quot;Nginx 的负载均衡集群&quot;&gt;&lt;/a&gt;Nginx 的负载均衡集群&lt;/h5&gt;&lt;p&gt;Nginx的负载均衡和lvs相比，Nginx属于更高
      
    
    </summary>
    
      <category term="nginx" scheme="http://grapedlinux.cn/categories/nginx/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LB集群之LVS介绍</title>
    <link href="http://grapedlinux.cn/2017/03/29/17032902/"/>
    <id>http://grapedlinux.cn/2017/03/29/17032902/</id>
    <published>2017-03-29T12:50:10.000Z</published>
    <updated>2017-03-30T01:40:37.321Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-LB集群之LVS介绍"><a href="#1-LB集群之LVS介绍" class="headerlink" title="1. LB集群之LVS介绍"></a>1. LB集群之LVS介绍</h5><p>LB集群是load balance 集群的简写，翻译成中文就是负载均衡集群。常用的负载均衡开源软件有，nginx、lvs、keepalived，商业的硬件负载均衡设备有F5，Netscale。</p><p>LB集群的结构如下图，原理也很简单，就是当用户的请求过来时，会直接发到分发器（Director Server）上，然后它把用户的请求根据预先设置好的算法，只能均衡的分发到后端真正的服务器（Real Server）上。如果不同的机器，可能用户请求到的数据不一样，为了避免这样情况的发生，所以用到了共享存储，这样保证所有用户请求的数据是一样的。<br><img src="http://www.apelearn.com/bbs/data/attachment/forum/201406/16/115112w1we1x4e5ueewzrd.png" alt="image"></p><p>LVS是一个实现负载均衡集群的开源软件项目，LVS架构从逻辑上课分为调度层（Director），server层（Real server）和共享存储。LVS从实现上，分为下面三种模式：</p><ol><li>NAT（调度器将请求的目标IP即vip改为Real Server的ip，返回的数据包也经过调度器，调度器再把原地址修改为vip）。<img src="http://www.apelearn.com/bbs/data/attachment/forum/201406/16/115114l0ez0aga011e901u.jpg" alt="image"></li><li>TUN （调度器将请求来的数据包封装加密通过IP隧道转发到后端的real server上，而real server会直接把数据返回给客户端，而不再经过调度器。）</li><li>DR （调度器将请求来的数据包的目标mac地址改为real server的mac地址，返回的时候也不经过调度器，直接返回给客户端）<img src="http://www.apelearn.com/bbs/data/attachment/forum/201406/16/115116xqv78w7v860vq8h6.jpg" alt="image"></li><li>参考资料：<a href="http://www.it165.net/admin/html/201401/2248.html" target="_blank" rel="noopener">LVS原理详解（3种工作方式8种调度算法）</a></li></ol><p>图中出现的几个IP概念，需要解释一下：</p><ul><li>DIP（Director ip）为分发器IP，NAT模式下它必须是公网IP，要对外服务。</li><li>VIP（Virtual  ip）为虚拟IP，用在TUN和DR模式中，需要同时配置在分发器和后端真实服务器上。</li><li>RIP（Real ip）为后端真实服务器的IP，在TUN和DR模式中，RIP为公网IP。</li></ul><p>要想把用户的请求调度给后端RS，是需要经过调度算法来实现的，那么关于LVS的调度算法，都有哪些？</p><ul><li>轮叫调度（Round Robin）（简称rr），这种算法是最简单的，不管后端RS配置和处理能力，非常均衡的分发下去。</li><li>加权轮叫（Weighted Round Robin）（简称wrr），比上面的算法多了一个权重概念，可以给RS设置权重，权重越高，那么分发的请求数越多，权重的取值范围0-100.</li><li>最少链接（least connection）（LC），这个算法会根据后端RS的连接数来决定把请求分发给谁，比如RS1链接数比RS2链接数少，那么请求就优先发给RS1。</li><li>加权最少链接（Weighted Least Connection）（WLC），比第三个算法多了一个权重概念。</li><li>基于局部性的最少连接调度算法(lblc)是请求数据包的目标IP地址的一种调度算法，该算法先根据请求的目标IP地址寻找最近的该目标IP地址所有使用的服务器，如果这台服务器依然可用，并且用能力处理该请求，调度器会尽量选择相同的服务器，否则会继续选择其他可行的服务器。</li><li>带复杂的基于局部性最少的连接算法(lblcr)激励的不是一个目标IP与一台服务器之间的连接记录，他会维护一个目标IP到一组服务器之间的映射关系，防止单点服务器负责过高。</li><li>目标地址散列调度算法(DH)也是根据目标IP地址通过散列函数将目标IP与服务器建立映射关系，出现服务器不可用或负载过高的情况下，发往该目标IP的请求会固定发给该服务器。</li><li>源地址散列调度算法(SH)与目标地址散列调度算法类似，但它是根据源地址散列算法进行静态分配固定的服务器资源。</li></ul><h5 id="2-LVS的NAT模式"><a href="#2-LVS的NAT模式" class="headerlink" title="2. LVS的NAT模式"></a>2. LVS的NAT模式</h5><h6 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h6><p>台服务器一台作为director, 两台作为real server<br>Director 有一个外网ip (192.168.31.166) 和一个内网ip(192.168.21.166), 两个real server上只有内网ip(192.168.21.100)和(192.168.21.101) 并且需要把两个real server的内网网关设置为director的内网ip(192.168.21.166)</p><p>补充：<a href="http://ask.apelearn.com/question/10536" target="_blank" rel="noopener">lvs nat模式时设置网络环境的方法</a></p><h6 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a>2. 安装和配置</h6><p>两个real server 上都安装httpd:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></p><p>Director上安装ipvsadm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y  ipvsadm</span><br></pre></td></tr></table></figure></p><p>Direcotr 上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/sbin/lvs_nat.sh //增加:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#! /bin/bash</span><br><span class="line"># director 服务器上开启路由转发功能: </span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward </span><br><span class="line"># 关闭icmp的重定向</span><br><span class="line">echo 0 &gt; /proc/sys/net/ipv4/conf/all/send_redirects</span><br><span class="line">echo 0 &gt; /proc/sys/net/ipv4/conf/default/send_redirects</span><br><span class="line">echo 0 &gt; /proc/sys/net/ipv4/conf/eth0/send_redirects</span><br><span class="line">echo 0 &gt; /proc/sys/net/ipv4/conf/eth1/send_redirects</span><br><span class="line"></span><br><span class="line"># director 设置nat防火墙</span><br><span class="line">iptables -t nat -F</span><br><span class="line">iptables -t nat -X</span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.21.0/24  -j MASQUERADE</span><br><span class="line"># director设置ipvsadm</span><br><span class="line">IPVSADM=&apos;/sbin/ipvsadm&apos;</span><br><span class="line">$IPVSADM -C</span><br><span class="line">$IPVSADM -A -t 192.168.31.166:80 -s lc -p 300</span><br><span class="line">$IPVSADM -a -t 192.168.31.166:80 -r 192.168.21.100:80 -m -w 1</span><br><span class="line">$IPVSADM -a -t 192.168.31.166:80 -r 192.168.21.101:80 -m -w 1</span><br></pre></td></tr></table></figure></p><p>直接运行这个脚本就可以完成lvs/nat的配置了: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash /usr/local/sbin/lvs_nat.sh</span><br></pre></td></tr></table></figure><h6 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h6><p>通过浏览器测试两台机器上的web内容，为了区分开，我们可以把nginx的默认页修改一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs1上： echo &quot;rs1rs1&quot; &gt;/usr/share/nginx/html/index.html</span><br><span class="line">rs2上： echo &quot;rs2rs2&quot; &gt;/usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><h5 id="3-LVS的DR设置"><a href="#3-LVS的DR设置" class="headerlink" title="3. LVS的DR设置"></a>3. LVS的DR设置</h5><h6 id="1-环境说明-1"><a href="#1-环境说明-1" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h6><p>三台机器:<br>director(eth0192.168.31.166, vip eth0:0: 192.168.31.110)<br>real server1(eth0 rip: 192.168. 31.100, vip lo:0: 192.168.31.110)<br>real server2(eth0 rip: 192.168.31.101, vip lo:0: 192.168.31.110)</p><h6 id="2-编写脚本"><a href="#2-编写脚本" class="headerlink" title="2. 编写脚本"></a>2. 编写脚本</h6><p>Director 上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/sbin/lvs_dr.sh //增加</span><br><span class="line"></span><br><span class="line">#! /bin/bash</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">ipv=/sbin/ipvsadm</span><br><span class="line">vip=192.168.31.110</span><br><span class="line">rs1=192.168.31.100</span><br><span class="line">rs2=192.168.31.101</span><br><span class="line">ifconfig eth0:0 $vip broadcast $vip netmask 255.255.255.255 up</span><br><span class="line">route add -host $vip dev eth0:0</span><br><span class="line">$ipv -C</span><br><span class="line">$ipv -A -t $vip:80 -s rr </span><br><span class="line">$ipv -a -t $vip:80 -r $rs1:80 -g -w 1</span><br><span class="line">$ipv -a -t $vip:80 -r $rs2:80 -g -w 1</span><br></pre></td></tr></table></figure></p><p>两台rs上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/sbin/lvs_dr_rs.sh</span><br><span class="line">#! /bin/bash</span><br><span class="line">vip=192.168.31.110</span><br><span class="line">ifconfig lo:0 $vip broadcast $vip netmask 255.255.255.255 up </span><br><span class="line">route add -host $vip lo:0</span><br><span class="line">echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br></pre></td></tr></table></figure></p><p>关于arp_ignore和 arp_announce参考：<a href="http://www.cnblogs.com/lgfeng/archive/2012/10/16/2726308.html" target="_blank" rel="noopener">LVS负载均衡中arp_ignore和arp_annonuce参数配置的含义</a></p><p>然后director上执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /usr/local/sbin/lvs_dr.sh</span><br></pre></td></tr></table></figure></p><p>两台rs上执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /usr/local/sbin/lvs_dr_rs.sh</span><br></pre></td></tr></table></figure></p><p>Windows下浏览器测试访问。</p><h5 id="4-LVS-DR-keepalived配置"><a href="#4-LVS-DR-keepalived配置" class="headerlink" title="4. LVS/DR + keepalived配置"></a>4. LVS/DR + keepalived配置</h5><p>注意：前面虽然我们已经配置过一些操作，但是下面我们使用keepaliave操作和之前的操作是有些冲突的，所以若是之前配置过DR，请首先做如下操作：</p><p>dr上执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ipv -C</span><br><span class="line">ifconfig eth0:0  down</span><br></pre></td></tr></table></figure></p><p>前面的lvs虽然已经配置成功也实现了负载均衡，但是我们测试的时候发现，当某台real server把httpd进程停掉，那么director照样会把请求转发过去，这样就造成了某些请求不正常。所以需要有一种机制用来检测real server的状态，这就是keepalived。它的作用除了可以检测rs状态外，还可以检测备用director的状态，也就是说keepalived可以实现ha集群的功能，当然了也需要一台备用director.<br>备用director也需要安装一下keepalived软件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure><p>安装好后，编辑配置文件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf   //加入如下：</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER   #备用服务器上为 BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100  #备用服务器上为90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.31.110</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.31.110 80 &#123;</span><br><span class="line">    delay_loop 6                  #(每隔10秒查询realserver状态)</span><br><span class="line">    lb_algo wlc                  #(lvs 算法)</span><br><span class="line">    lb_kind DR                  #(Direct Route)</span><br><span class="line">    persistence_timeout 60        #(同一IP的连接60秒内被分配到同一台realserver)</span><br><span class="line">    protocol TCP                #(用TCP协议检查realserver状态)</span><br><span class="line"></span><br><span class="line">real_server 192.168.31.100 80 &#123;</span><br><span class="line">        weight 100               #(权重)</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">        connect_timeout 10       #(10秒无响应超时)</span><br><span class="line">        nb_get_retry 3</span><br><span class="line">        delay_before_retry 3</span><br><span class="line">        connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">real_server 192.168.31.101 80 &#123;</span><br><span class="line">        weight 100</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">        connect_timeout 10</span><br><span class="line">        nb_get_retry 3</span><br><span class="line">        delay_before_retry 3</span><br><span class="line">        connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为主director的配置文件，从director的配置文件只需要修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">state MASTER  -&gt; state BACKUP</span><br><span class="line">priority 100 -&gt; priority 90</span><br></pre></td></tr></table></figure><p>配置完keepalived后，需要开启端口转发（主从都要做）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>然后，两个rs上执行 /usr/local/sbin/lvs_dr_rs.sh 脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /usr/local/sbin/lvs_dr_rs.sh</span><br></pre></td></tr></table></figure></p><p>最后，两个director上启动keepalived服务（先主后从）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/keepalived start</span><br></pre></td></tr></table></figure><p>另外，需要注意的是，启动keepalived服务会自动生成vip和ipvsadm规则，不需要再去执行上面提到的/usr/local/sbin/lvs_dr.sh 脚本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-LB集群之LVS介绍&quot;&gt;&lt;a href=&quot;#1-LB集群之LVS介绍&quot; class=&quot;headerlink&quot; title=&quot;1. LB集群之LVS介绍&quot;&gt;&lt;/a&gt;1. LB集群之LVS介绍&lt;/h5&gt;&lt;p&gt;LB集群是load balance 集群的简写，翻译成中
      
    
    </summary>
    
      <category term="LVS" scheme="http://grapedlinux.cn/categories/LVS/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>HA集群配置</title>
    <link href="http://grapedlinux.cn/2017/03/29/17032901/"/>
    <id>http://grapedlinux.cn/2017/03/29/17032901/</id>
    <published>2017-03-28T16:04:09.000Z</published>
    <updated>2017-03-28T16:12:54.305Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HA集群配置"><a href="#HA集群配置" class="headerlink" title="HA集群配置"></a>HA集群配置</h4><p>HA 即 （high available）高可用，又被叫做双机热备，用于关键性业务。 简单理解就是，有两台机器A和B，正常是A提供服务，B待命闲置，当A宕机或服务宕掉，会切换至B机器继续提供服务。常用实现高可用的开源软件有heartbeat和keepalived，其中keepalived有负载均衡的功能。<img src="http://i.imgur.com/RKgR1gc.jpg" alt="image"><br>如图所示为一个HA架构，一个交换机下面有两台机器web1和web2，其中web1为主节点，正常是它在提供服务，web2为备用闲置节点。web1和web2中间有一个心跳线，检查对方是否存活状态。流动IP，也叫vip是对外提供服务的IP，正常情况下是配置在web1上的，当web1宕机后，web2会自动配置该vip，对外提供服务。</p><p>下面我们用heartbeat来做HA集群，并且把Nginx服务作为HA对应的服务。</p><p>准备工作：<br>两个机器，都是CentOS6.5 网卡eth0 ip如下：</p><pre><code>master 192.168.0.161slave  192.168.0.162</code></pre><h5 id="1-设置hostname-（主从上都要进行）"><a href="#1-设置hostname-（主从上都要进行）" class="headerlink" title="1. 设置hostname （主从上都要进行）"></a>1. 设置hostname （主从上都要进行）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在主上</span><br><span class="line">hostname master</span><br><span class="line">bash</span><br><span class="line">#在从上</span><br><span class="line">hostname slave</span><br><span class="line">bash</span><br></pre></td></tr></table></figure><h5 id="2-关闭防火墙-（主从上都要进行）"><a href="#2-关闭防火墙-（主从上都要进行）" class="headerlink" title="2. 关闭防火墙 （主从上都要进行）"></a>2. 关闭防火墙 （主从上都要进行）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># iptables</span><br><span class="line">iptables -F </span><br><span class="line">service iptables save</span><br><span class="line"># selinux</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/&apos; /etc/selinux/config</span><br></pre></td></tr></table></figure><h5 id="3-配置hosts-（主从上都要进行）"><a href="#3-配置hosts-（主从上都要进行）" class="headerlink" title="3. 配置hosts （主从上都要进行）"></a>3. 配置hosts （主从上都要进行）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"># 加入：</span><br><span class="line">192.168.0.161 master</span><br><span class="line">192.168.0.162 slave</span><br></pre></td></tr></table></figure><h5 id="4-安装epel扩展源-（主从上都要进行）"><a href="#4-安装epel扩展源-（主从上都要进行）" class="headerlink" title="4. 安装epel扩展源 （主从上都要进行）"></a>4. 安装epel扩展源 （主从上都要进行）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><h5 id="5-安装heartbeat-libnet-Nginx"><a href="#5-安装heartbeat-libnet-Nginx" class="headerlink" title="5. 安装heartbeat libnet Nginx"></a>5. 安装heartbeat libnet Nginx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y heartbeat* libnet nginx</span><br></pre></td></tr></table></figure><h5 id="6-主（master）上配置"><a href="#6-主（master）上配置" class="headerlink" title="6. 主（master）上配置"></a>6. 主（master）上配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/doc/heartbeat-3.0.4/</span><br><span class="line">cp  authkeys  ha.cf haresources   /etc/ha.d/</span><br><span class="line">cd /etc/ha.d</span><br><span class="line">vi  authkeys  //加入或更改为</span><br><span class="line"></span><br><span class="line">auth 3</span><br><span class="line">3 md5 Hello!</span><br><span class="line"></span><br><span class="line">chmod 600 authkeys</span><br><span class="line">vi  haresources  //加入</span><br><span class="line"></span><br><span class="line">master 192.168.0.150/24/eth0:0 nginx   </span><br><span class="line"></span><br><span class="line">vi  ha.cf   //改为如下内容：</span><br><span class="line">debugfile /var/log/ha-debug</span><br><span class="line">logfile /var/log/ha-log</span><br><span class="line">logfacility     local0</span><br><span class="line">keepalive 2</span><br><span class="line">deadtime 30</span><br><span class="line">warntime 10</span><br><span class="line">initdead 60</span><br><span class="line">udpport 694</span><br><span class="line">ucast eth0 192.168.0.162</span><br><span class="line">auto_failback on</span><br><span class="line">node    master</span><br><span class="line">node    slave</span><br><span class="line">ping 192.168.0.1</span><br><span class="line">respawn hacluster /usr/lib/heartbeat/ipfail</span><br></pre></td></tr></table></figure><p>配置说明：</p><ul><li>debugfile /var/log/ha-debug：保存heartbeat的调试信息；</li><li>dlogfile /var/log/ha-log：heartbeat日志信息；</li><li>dlogfacility local0：日志级别；</li><li>dkeepalive 2：跳时间间隔；</li><li>ddeadtime 30：超出该时间间隔未收到对方节点心跳，则认为对方已死亡；</li><li>dwarntime 10：超出该时间间隔未收到对方节点心跳，则发出警告并记录到日志；</li><li>dinitdead 60：在某些系统上，系统启动或重启之后需要经过一段时间网络才能恢复正常工作，该选项用于解决这种情况产生的时间间隔；</li><li>dudpport 694：设置广播通信使用的端口，649为默认端口；</li><li>ducast eth0 192.168.0.162：设置对方奇迹心跳检测的网卡和IP；</li><li>dauto_failback on：heartbeat的两台之极分别为主节点和从节点，主节点在正常情况下占用资源并运行所有服务，遇到故障时把资源交给从节点并由从节点运行服务；</li><li>dnode   master：指定主；</li><li>dnode    slave：指定从；</li><li>dping 192.168.0.1</li><li>drespawn hacluster/usr/lib/heartbeat/ipfail：指定与heartbeat一同启动和关闭的进程，该进程被自动监听视，遇到故障则从新启动。最常见的进程是ipfail，该进程用于检测和处理网络故障，需要配合ping语句指定pingnode来检测网络连接。如果你的系统是64位，请注意该文件路径</li></ul><h5 id="7-把主上的三个配置拷贝到从上"><a href="#7-把主上的三个配置拷贝到从上" class="headerlink" title="7. 把主上的三个配置拷贝到从上"></a>7. 把主上的三个配置拷贝到从上</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ha.d/</span><br><span class="line">scp  authkeys  ha.cf haresources   slave:/etc/ha.d/</span><br></pre></td></tr></table></figure><h5 id="8-到从上-slave-编辑ha-cf"><a href="#8-到从上-slave-编辑ha-cf" class="headerlink" title="8. 到从上(slave) 编辑ha.cf"></a>8. 到从上(slave) 编辑ha.cf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi  /etc/ha.d/ha.cf   //只需要更改一个地方</span><br><span class="line">ucast eth1 192.168.0.162 改为   ucast eth1 192.168.0.161</span><br></pre></td></tr></table></figure><h5 id="9-启动heartbeat"><a href="#9-启动heartbeat" class="headerlink" title="9. 启动heartbeat"></a>9. 启动heartbeat</h5><p>先主后从</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service heartbeat start</span><br></pre></td></tr></table></figure><h5 id="10-检查测试"><a href="#10-检查测试" class="headerlink" title="10. 检查测试"></a>10. 检查测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p> 看是否有 eth0:0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux |grep nginx</span><br></pre></td></tr></table></figure><p>  看是否有nginx进程</p><h5 id="11-测试1"><a href="#11-测试1" class="headerlink" title="11.  测试1"></a>11.  测试1</h5><p>主上故意禁ping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p icmp -j DROP</span><br></pre></td></tr></table></figure><p>可以看到日志/var/log/ha-log 发生如下变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ResourceManager(default)[1751]: 2017/03/28_23:01:07 info: Running /etc/init.d/nginx  start</span><br><span class="line">Mar 28 23:06:49 master heartbeat: [1543]: WARN: node 192.168.0.1: is dead</span><br><span class="line">Mar 28 23:06:49 master heartbeat: [1543]: info: Link 192.168.0.1:192.168.0.1 dead.</span><br><span class="line">Mar 28 23:06:49 master ipfail: [1571]: info: Status update: Node 192.168.0.1 now has status dead</span><br><span class="line">harc(default)[2053]:    2017/03/28_23:06:49 info: Running /etc/ha.d//rc.d/status status</span><br><span class="line">Mar 28 23:06:51 master ipfail: [1571]: info: NS: We are dead. :&lt;</span><br><span class="line">Mar 28 23:06:51 master ipfail: [1571]: info: Link Status update: Link 192.168.0.1/192.168.0.1 now has status dead</span><br><span class="line">Mar 28 23:06:52 master ipfail: [1571]: info: We are dead. :&lt;</span><br><span class="line">Mar 28 23:06:52 master ipfail: [1571]: info: Asking other side for ping node count.</span><br><span class="line">Mar 28 23:06:55 master ipfail: [1571]: info: Giving up because we were told that we have less ping nodes.</span><br><span class="line">Mar 28 23:06:55 master ipfail: [1571]: info: Delayed giveup in 4 seconds.</span><br><span class="line">Mar 28 23:06:59 master ipfail: [1571]: info: giveup() called (timeout worked)</span><br><span class="line">Mar 28 23:06:59 master heartbeat: [1543]: info: master wants to go standby [all]</span><br><span class="line">Mar 28 23:07:00 master heartbeat: [1543]: info: standby: slave can take our all resources</span><br><span class="line">Mar 28 23:07:00 master heartbeat: [2079]: info: give up all HA resources (standby).</span><br><span class="line">ResourceManager(default)[2092]: 2017/03/28_23:07:00 info: Releasing resource group: master 192.168.0.150/24/eth0:0 nginx</span><br><span class="line">ResourceManager(default)[2092]: 2017/03/28_23:07:00 info: Running /etc/init.d/nginx  stop</span><br><span class="line">ResourceManager(default)[2092]: 2017/03/28_23:07:00 info: Running /etc/ha.d/resource.d/IPaddr 192.168.0.150/24/eth0:0 stop</span><br><span class="line">IPaddr(IPaddr_192.168.0.150)[2178]:     2017/03/28_23:07:00 INFO: IP status = ok, IP_CIP=</span><br><span class="line">/usr/lib/ocf/resource.d//heartbeat/IPaddr(IPaddr_192.168.0.150)[2152]:  2017/03/28_23:07:00 INFO:  Success</span><br><span class="line">Mar 28 23:07:00 master heartbeat: [2079]: info: all HA resource release completed (standby).</span><br><span class="line">Mar 28 23:07:00 master heartbeat: [1543]: info: Local standby process completed [all].</span><br><span class="line">Mar 28 23:07:02 master heartbeat: [1543]: WARN: 1 lost packet(s) for [slave] [197:199]</span><br><span class="line">Mar 28 23:07:02 master heartbeat: [1543]: info: remote resource transition completed.</span><br><span class="line">Mar 28 23:07:02 master heartbeat: [1543]: info: No pkts missing from slave!</span><br><span class="line">Mar 28 23:07:02 master heartbeat: [1543]: info: Other node completed standby takeover of all resources.</span><br></pre></td></tr></table></figure><h5 id="12-测试2"><a href="#12-测试2" class="headerlink" title="12. 测试2"></a>12. 测试2</h5><p>主上停止heartbeat服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service heartbeat stop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HA集群配置&quot;&gt;&lt;a href=&quot;#HA集群配置&quot; class=&quot;headerlink&quot; title=&quot;HA集群配置&quot;&gt;&lt;/a&gt;HA集群配置&lt;/h4&gt;&lt;p&gt;HA 即 （high available）高可用，又被叫做双机热备，用于关键性业务。 简单理解就是，有两台机
      
    
    </summary>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>DNS服务及安装配置</title>
    <link href="http://grapedlinux.cn/2017/03/27/17032701/"/>
    <id>http://grapedlinux.cn/2017/03/27/17032701/</id>
    <published>2017-03-26T18:09:44.000Z</published>
    <updated>2017-03-26T18:23:05.529Z</updated>
    
    <content type="html"><![CDATA[<h4 id="DNS介绍"><a href="#DNS介绍" class="headerlink" title="DNS介绍"></a>DNS介绍</h4><p>DNS 为Domain Name System（域名系统）的缩写，它是一种将ip地址转换成对应的主机名或将主机名转换成与之相对应ip地址的一种服务机制。 </p><p>其中通过域名解析出ip地址的叫做正向解析，通过ip地址解析出域名的叫做反向解析。 DNS使用TCP和UDP, 端口号都是53, 但它主要使用UDP，服务器之间备份使用TCP。 </p><p>全世界只有13台“根”服务器，1个主根服务器放在美国，其他12台为辅根服务器，DNS服务器根据角色可以分为：主DNS, 从DNS, 缓存DNS服务器，DNS转发服务器。</p><p><img src="http://i.imgur.com/HRqBRw9.jpg" alt=""><br>有了网站域名，下面来看看域名<a href="http://www.baidu.com是如何解析到IP的，下图为域名解析流程图：" target="_blank" rel="noopener">www.baidu.com是如何解析到IP的，下图为域名解析流程图：</a></p><p><img src="http://i.imgur.com/8zme6Rz.jpg" alt=""></p><h5 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h5><ol><li>在浏览器输入<a href="http://www.baidu.com域名，操作系统会先检查自己本地的hosts文件，是否有这个网址的映射关系，如果有，就先调用这个IP地址映射，完成域名解析。" target="_blank" rel="noopener">www.baidu.com域名，操作系统会先检查自己本地的hosts文件，是否有这个网址的映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a></li><li>如果hosts里没有这个域名的映射，则查找本地的DNS解析缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</li><li>如果hosts与本地DNS解析缓存器中都没有相应的网址映射关系，首先会找本机设置的首选DNS服务器，再次我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</li><li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址的映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</li><li>如果本地DNS服务器本地区域文件与缓存解析都失败，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用本地转发，本地DNS就把请求发至13台跟DNS，跟DNS收到请求后会判断这个域名（.com）是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS收到IP后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己已无法解析，他会找一个关系.com域下一级的DNS服务器地址（baidu.com）域服务器，重复上面的动作进行查询，直到找到<a href="http://www.baidu.com主机。" target="_blank" rel="noopener">www.baidu.com主机。</a></li><li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级进行解析，上一级服务器如果不能解析，或找跟DNS或把转发请求转至上上级，以此循环，不管是本地DNS服务器用到是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由这个DNS服务器再返回给客户机。</li></ol><h4 id="DNS安装配置"><a href="#DNS安装配置" class="headerlink" title="DNS安装配置"></a>DNS安装配置</h4><p>我们使用bind来搭建DNS服务首先：</p><h5 id="1-安装bind"><a href="#1-安装bind" class="headerlink" title="1. 安装bind"></a>1. 安装bind</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bind bind-utils</span><br></pre></td></tr></table></figure><p>清空默认配置文件，自定义配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/named.conf /etc/named.conf.bak  </span><br><span class="line">&gt;/etc/named.conf</span><br><span class="line">vim /etc/named.conf              #写入如下配置</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">    directory &quot;/var/named&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">zone &quot;.&quot; IN  &#123;</span><br><span class="line">    type hint;</span><br><span class="line">    file &quot;named.ca&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">zone &quot;localhost&quot; IN &#123;</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;localhost.zone&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">zone &quot;0.0.127.in-addr.arpa&quot; IN &#123;</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;named.local&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>保存配置，然后修改其属性，定义本地根域配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown named /etc/named.conf</span><br><span class="line">cd /var/named/</span><br><span class="line">dig -t NS . &gt; named.ca</span><br></pre></td></tr></table></figure><h5 id="2-增加一个域名（zone）"><a href="#2-增加一个域名（zone）" class="headerlink" title="2. 增加一个域名（zone）"></a>2. 增加一个域名（zone）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/named.conf </span><br><span class="line">// 增加:</span><br><span class="line">zone &quot;123.com&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;123.com.zone&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;189.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;189.168.192.zone&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 修改： </span><br><span class="line">listen-on port 53 &#123; 127.0.0.1;192.168.189.131; &#125;;</span><br></pre></td></tr></table></figure><p>编辑zone文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /var/named/123.com.zone</span><br><span class="line">//增加下列配置：</span><br><span class="line"> </span><br><span class="line">$TTL 1D</span><br><span class="line">@       IN SOA  @ admin.123.com. (</span><br><span class="line">                                        2017032602       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">       IN  NS      ns.123.com.</span><br><span class="line">       IN  MX  5   mail.123.com.</span><br><span class="line">mail   IN  A       192.168.189.133</span><br><span class="line">ns     IN  A       192.168.189.131</span><br><span class="line">www    IN  A       11.11.11.11</span><br><span class="line">bbs    IN  CNAME    www</span><br></pre></td></tr></table></figure></p><p>编辑反解析文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /var/named/189.168.192.zone</span><br><span class="line">//增加</span><br><span class="line">$TTL 1D</span><br><span class="line">@       IN SOA  @ admin.123.com. (</span><br><span class="line">                                        20170326       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">       IN  NS      ns.123.com.</span><br><span class="line">131    IN  PTR     ns.123.com.</span><br><span class="line">133    IN  PTR     mail.123.com.</span><br></pre></td></tr></table></figure></p><p>重启named服务，测试 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/named restart                                 </span><br><span class="line">停止 named：                                               [确定]</span><br><span class="line">启动 named：                                               [确定]</span><br><span class="line">dig @192.168.189.131 www.123.com  #检测正解析</span><br><span class="line">dig @192.168.189.131 -x 192.168.189.131 #检测反解析</span><br></pre></td></tr></table></figure><h5 id="3-配置DNS转发"><a href="#3-配置DNS转发" class="headerlink" title="3. 配置DNS转发"></a>3. 配置DNS转发</h5><p>我们配置的DNS是只能解析我们定义的zone的，我们没有定义的是不能解析的。<br>配置DNS转发就可以解析其他互联网上的域名了，前提是这个域名在互联网中的确在使用，也就是说这个域名已经被某个DNS服务器解析了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/named.conf </span><br><span class="line">//在options&#123;&#125; 里面增加</span><br><span class="line">forward first;  </span><br><span class="line">forwarders &#123; 114.114.114.114; &#125;;</span><br></pre></td></tr></table></figure></p><p>这两行就是用来配置转发的，该DNS服务器不能解析的域名会转发到114.114.114.114这个DNS服务器上去解析。</p><h5 id="4-配置主从"><a href="#4-配置主从" class="headerlink" title="4. 配置主从"></a>4. 配置主从</h5><p>在从服务器上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bind bind-utils</span><br></pre></td></tr></table></figure></p><p>修改一下从的/etc/named.conf </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;; </span><br><span class="line">//      listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">//      注释掉后表明监听任何端口</span><br><span class="line">        directory       &quot;/var/named&quot;;</span><br><span class="line">        dump-file       &quot;/var/named/data/cache_dump.db&quot;;</span><br><span class="line">        statistics-file &quot;/var/named/data/named_stats.txt&quot;;</span><br><span class="line">        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;</span><br><span class="line">        allow-query     &#123; localhost; &#125;;</span><br><span class="line">        recursion yes;</span><br><span class="line"></span><br><span class="line">        dnssec-enable yes;</span><br><span class="line">        dnssec-validation yes;</span><br><span class="line"></span><br><span class="line">        /* Path to ISC DLV key */</span><br><span class="line">        bindkeys-file &quot;/etc/named.iscdlv.key&quot;;</span><br><span class="line"></span><br><span class="line">        managed-keys-directory &quot;/var/named/dynamic&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">logging &#123;</span><br><span class="line">        channel default_debug &#123;</span><br><span class="line">                file &quot;data/named.run&quot;;</span><br><span class="line">                severity dynamic;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;.&quot; IN &#123;</span><br><span class="line">        type hint;</span><br><span class="line">        file &quot;named.ca&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">include &quot;/etc/named.rfc1912.zones&quot;;</span><br><span class="line">include &quot;/etc/named.root.key&quot;;</span><br><span class="line"></span><br><span class="line">zone &quot;123.com&quot; IN &#123;</span><br><span class="line">        type slave ;</span><br><span class="line">        file &quot;slaves/123.com.zone&quot;;</span><br><span class="line">        masters &#123; 192.168.189.131; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;189.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">        type slave;</span><br><span class="line">        file &quot;slaves/189.168.192.zone&quot;;</span><br><span class="line">        masters &#123; 192.168.189.131; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从上生成rndc.key:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rndc-confgen -r /dev/urandom -a </span><br><span class="line">chown named:named /etc/rndc.key</span><br></pre></td></tr></table></figure></p><p>从上启动named:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/named start</span><br></pre></td></tr></table></figure></p><p>启动成功后会在 /var/named/下生成一个slaves目录，这个目录下会有192.168.zone, abc.com.zone这两个文件，内容是和主上的一样的<br>在从上测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dig @192.168.189.133 www.123.com  #检测正解析</span><br><span class="line">dig @192.168.189.132 -x 192.168.189.131 #检测反解析</span><br></pre></td></tr></table></figure></p><h5 id="5-测试主从同步"><a href="#5-测试主从同步" class="headerlink" title="5. 测试主从同步"></a>5. 测试主从同步</h5><p>在主dns上更改文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /var/named/123.com.zone </span><br><span class="line">// 在最后增加一行：</span><br><span class="line"></span><br><span class="line">graped IN  A       111.111.111.111</span><br></pre></td></tr></table></figure></p><p>另外需要修改一下第三行的那个数字串，这个是用来做标记的，只有这个数字变化了，才可以让从自动跟着变，数字只能是变大，不能减小，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016081601 -&gt; 2016081602</span><br></pre></td></tr></table></figure></p><p>重启主namd服务:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/named restart</span><br></pre></td></tr></table></figure></p><p>经测试我们发现一个问题，就是从经常会同步特别慢，这是很要命的。所以需要我们做一个特殊操作，在主上的/etc/named.conf中，123.com的zone中增加两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notify yes;</span><br><span class="line">also-notify &#123; 192.168.0.12; &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;DNS介绍&quot;&gt;&lt;a href=&quot;#DNS介绍&quot; class=&quot;headerlink&quot; title=&quot;DNS介绍&quot;&gt;&lt;/a&gt;DNS介绍&lt;/h4&gt;&lt;p&gt;DNS 为Domain Name System（域名系统）的缩写，它是一种将ip地址转换成对应的主机名或将主机名转换
      
    
    </summary>
    
      <category term="Linux_Network" scheme="http://grapedlinux.cn/categories/Linux-Network/"/>
    
    
      <category term="linux" scheme="http://grapedlinux.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用mysql-proxy 快速实现mysql 集群 读写分离</title>
    <link href="http://grapedlinux.cn/2017/03/23/17032304/"/>
    <id>http://grapedlinux.cn/2017/03/23/17032304/</id>
    <published>2017-03-23T10:08:04.000Z</published>
    <updated>2017-03-23T10:14:49.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用mysql-proxy-快速实现mysql-集群-读写分离"><a href="#使用mysql-proxy-快速实现mysql-集群-读写分离" class="headerlink" title="使用mysql-proxy 快速实现mysql 集群 读写分离"></a>使用mysql-proxy 快速实现mysql 集群 读写分离</h3><h6 id="目前较为常见的mysql读写分离分为两种："><a href="#目前较为常见的mysql读写分离分为两种：" class="headerlink" title="目前较为常见的mysql读写分离分为两种："></a>目前较为常见的mysql读写分离分为两种：</h6><ol><li>基于程序代码内部实现：在代码中对select操作分发到从库；其它操作由主库执行；这类方法也是目前生产环境应用最广泛，知名的如DISCUZ X2。优点是性能较好，因为在程序代码中实现，不需要增加额外的设备作为硬件开支。缺点是需要开发人员来实现，运维人员无从下手。 </li></ol><ol start="2"><li>基于中间代理层实现：我们都知道代理一般是位于客户端和服务器之间，代理服务器接到客户端请求后通过判断然后转发到后端数据库。在这有两个代表性程序。</li></ol><p><strong>mysql-proxy：</strong> mysql-proxy为mysql开源项目，通过其自带的lua脚本进行sql判断，虽然是mysql官方产品，但是mysql官方并不建议将mysql-proxy用到生产环境。  </p><p><strong>amoeba：</strong> 由陈思儒开发，作者曾就职于阿里巴巴，现就职于盛大。该程序由java语言进行开发，目前只听说阿里巴巴将其用于生产环境。另外，此项目严重缺少维护和推广（作者有个官方博客，很多用户反馈的问题发现作者不理睬） </p><p>经过上述简单的比较，通过程序代码实现mysql读写分离自然是一个不错的选择。但是并不是所有的应用都适合在程序代码中实现读写分离，像大型SNS、B2C这类应用可以在代码中实现，因为这样对程序代码本身改动较小；像一些大型复杂的java应用，这种类型的应用在代码中实现对代码改动就较大了。所以，像这种应用一般就会考虑使用代理层来实现。</p><p>下面我们看一下如何搭建mysql-proxy来实现mysql读写分离。</p><p>环境拓扑如下： </p><p><img src="http://static.oschina.net/uploads/img/201212/02005629_LhUe.jpg" alt="image"></p><p>关于mysql、mysql主从的搭建，在此不再演示，如下的操作均在mysql-proxy（192.168.1.200）服务器进行。</p><h5 id="1-安装mysql-proxy"><a href="#1-安装mysql-proxy" class="headerlink" title="1. 安装mysql-proxy"></a>1. 安装mysql-proxy</h5><p>i. 安装lua  (mysql-proxy需要使用lua脚本进行数据转发) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf </span><br><span class="line">lua-5.1.4.tar.gz </span><br><span class="line">cd lua-5.1.4 </span><br><span class="line">vi Makefile，修改INSTALL_TOP= </span><br><span class="line">/usr/local/lua </span><br><span class="line">make posix </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>ii. 安装libevent </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf libevent-2.0.8-rc.tar.gz </span><br><span class="line">cd libevent-2.0.8-rc </span><br><span class="line">./configure </span><br><span class="line">--prefix=/usr/local/libevent </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>iii. 安装check<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf check-0.9.8.tar.gz </span><br><span class="line">cd check-0.9.8 </span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>iv. 安装mysql客户端 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mysql-5.0.92.tar.gz </span><br><span class="line">cd mysql-5.0.92 </span><br><span class="line">./configure --without-server &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>v. 设置环境变量 （安装mysql-proxy所需变量） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile </span><br><span class="line">export LUA_CFLAGS=&quot;-I/usr/local/lua/include&quot; LUA_LIBS=&quot;-L/usr/local/lua/lib -llua -ldl&quot; LDFLAGS=&quot;-L/usr/local/libevent/lib -lm&quot; </span><br><span class="line">export CPPFLAGS=&quot;-I/usr/local/libevent/include&quot; </span><br><span class="line">export CFLAGS=&quot;-I/usr/local/libevent/include&quot; </span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>vi. 安装mysql-proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mysql-proxy-0.6.0.tar.gz </span><br><span class="line">cd </span><br><span class="line">mysql-proxy-0.6.0 </span><br><span class="line">./configure --prefix=/usr/local/mysql-proxy --with-mysql --with-lua </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>vii. 启动mysql-proxy </p><p>本次对两台数据库实现了读写分离；mysql-master为可读可写，mysql-slave为只读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql-proxy/sbin/mysql-proxy --proxy-backend-addresses=192.168.1.201:3306 </span><br><span class="line">--proxy-read-only-backend-addresses=192.168.1.202:3306 </span><br><span class="line">--proxy-lua-script=/usr/local/mysql-proxy/share/mysql-proxy/rw-splitting.lua </span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></p><p>注：如果正常情况下启动后终端不会有任何提示信息，mysql-proxy启动后会启动两个端口4040和4041，4040用于SQL转发，4041用于管理mysql-proxy。如有多个mysql-slave可以依次在后面添加 </p><h5 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h5><p>i. 连接测试 </p><p>因为默认情况下mysql数据库不允许用户在远程连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;grant </span><br><span class="line">all privileges on *.* to identified by &apos;123456&apos;; </span><br><span class="line"></span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure></p><p>客户端连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 -h192.168.1.200 -P4040</span><br></pre></td></tr></table></figure></p><p>ii. 读写分离测试 </p><p>为了测试出mysql读写分离的真实性，在测试之前，需要开启两台mysql的log功能，然后在mysql-slave服务器停止复制 </p><p>① 在两台mysql配置文件my.cnf中加入log=query.log，然后重启</p><p>② 在mysql-slave上执行SQL语句stop slave</p><p>③ 在两台mysql上执行#tail -f /usr/local/mysql/var/query.log</p><p>④ 在客户端上连接mysql（三个连接以上），然后执行create、select等SQL语句，观察两台mysql的日志有何变化</p><p>注：生产环境中除了进行程序调试外，其它不要开启mysql查询日志，因为查询日志记录了客户端的所有语句，频繁的IO操作将会导致mysql整体性能下降 </p><p>总结：在上述环境中，mysql-proxy和mysql-master、mysql-slave三台服务器均存在单点故障。如果在可用性要求较高的场合，单点隐患是绝对不允许的。为了避免mysql-proxy单点隐患有两种方法，一种方法是mysql-proxy配合keepalived做双机，另一种方法是将mysql-proxy和应用服务安装到同一台服务器上；为了避免mysql-master单点故障可以使用DRBD+heartbear做双机；避免mysql-slave单点故障增加多台mysql-slave即可，因为mysql-proxy会自动屏蔽后端发生故障的mysql-slave。</p><p>附: mysql-proxy LUA 读写分离脚本代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br></pre></td><td class="code"><pre><span class="line">--[[</span><br><span class="line">--</span><br><span class="line">-- author : KDr2 </span><br><span class="line">-- version 0.01</span><br><span class="line">-- SYNOPSIS:</span><br><span class="line">---  </span><br><span class="line">1.维护了一个连接池</span><br><span class="line">---  2.读写分离，简单的将select开头的语句放到slave上执行</span><br><span class="line">---  </span><br><span class="line">3.事务支持，所有事务放到master上执行，事务中不更改连接</span><br><span class="line">---  4.简单日志</span><br><span class="line">--</span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- config vars</span><br><span class="line">local min_idle_connections = 4</span><br><span class="line">local </span><br><span class="line">max_idle_connections = 8</span><br><span class="line">local log_level=1</span><br><span class="line">local encoding=&quot;utf8&quot;</span><br><span class="line">--- </span><br><span class="line">end of config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 事务标识，在事务内不归还连接</span><br><span class="line">local </span><br><span class="line">transaction_flags=&#123;&#125;</span><br><span class="line">setmetatable(transaction_flags,&#123;__index=function() </span><br><span class="line">return 0 end&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- log system</span><br><span class="line">log=&#123;</span><br><span class="line">   level=&#123;debug=1,info=2,warn=3,error=4&#125;,</span><br><span class="line">   </span><br><span class="line">funcs=&#123;&quot;debug&quot;,&quot;info&quot;,&quot;warn&quot;,&quot;error&quot;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">function log.log(level,m)</span><br><span class="line">   </span><br><span class="line">if level &gt;= log_level then</span><br><span class="line">      local msg=&quot;[&quot; .. os.date(&quot;%Y-%m-%d %X&quot;) </span><br><span class="line">..&quot;] &quot;.. log.funcs[level] .. &quot;: &quot; .. tostring(m)</span><br><span class="line">      print(msg) -- TODO  </span><br><span class="line">write msg into a log file.</span><br><span class="line">   end</span><br><span class="line">end</span><br><span class="line">for i,v in ipairs(log.funcs) </span><br><span class="line">do</span><br><span class="line">   log[v]=function(m) log.log(log.level[v],m) end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- connect to server</span><br><span class="line">function connect_server() </span><br><span class="line">   log.info(&quot; starting </span><br><span class="line">connect_server ... &quot;)</span><br><span class="line">   local least_idle_conns_ndx = 0</span><br><span class="line">   local </span><br><span class="line">least_idle_conns = 0</span><br><span class="line">   </span><br><span class="line">   for i = 1, #proxy.backends do</span><br><span class="line">      local s </span><br><span class="line">= proxy.backends[i]</span><br><span class="line">      local pool = s.pool </span><br><span class="line">      local cur_idle = </span><br><span class="line">pool.users[&quot;&quot;].cur_idle_connections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      log.debug(&quot;[&quot;.. s.address ..&quot;].connected_clients = &quot; .. </span><br><span class="line">s.connected_clients)</span><br><span class="line">      log.debug(&quot;[&quot;.. s.address ..&quot;].idling_connections </span><br><span class="line">= &quot; .. cur_idle)</span><br><span class="line">      log.debug(&quot;[&quot;.. s.address ..&quot;].type = &quot; .. </span><br><span class="line">s.type)</span><br><span class="line">      log.debug(&quot;[&quot;.. s.address ..&quot;].state = &quot; .. s.state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if s.state ~= proxy.BACKEND_STATE_DOWN then</span><br><span class="line">         -- try to </span><br><span class="line">connect to each backend once at least</span><br><span class="line">         if cur_idle == 0 </span><br><span class="line">then</span><br><span class="line">            proxy.connection.backend_ndx = i</span><br><span class="line">            </span><br><span class="line">log.info(&quot;server [&quot;.. proxy.backends[i].address ..&quot;] open new </span><br><span class="line">connection&quot;)</span><br><span class="line">            return</span><br><span class="line">         end</span><br><span class="line">         -- try to open at </span><br><span class="line">least min_idle_connections</span><br><span class="line">         if least_idle_conns_ndx == 0 </span><br><span class="line">or</span><br><span class="line">            ( cur_idle &lt; min_idle_connections and </span><br><span class="line">              </span><br><span class="line">cur_idle &lt; least_idle_conns ) then</span><br><span class="line">            least_idle_conns_ndx = </span><br><span class="line">i</span><br><span class="line">            least_idle_conns = cur_idle</span><br><span class="line">         end</span><br><span class="line">      end</span><br><span class="line">   </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   if least_idle_conns_ndx &gt; 0 then</span><br><span class="line">      proxy.connection.backend_ndx </span><br><span class="line">= least_idle_conns_ndx</span><br><span class="line">   end</span><br><span class="line">   </span><br><span class="line">   if proxy.connection.backend_ndx </span><br><span class="line">&gt; 0 then </span><br><span class="line">      local s = </span><br><span class="line">proxy.backends[proxy.connection.backend_ndx]</span><br><span class="line">      local pool = s.pool </span><br><span class="line"></span><br><span class="line">      local cur_idle = pool.users[&quot;&quot;].cur_idle_connections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if cur_idle &gt;= min_idle_connections then</span><br><span class="line">         -- we have 4 </span><br><span class="line">idling connections in the pool, that&apos;s good enough</span><br><span class="line">         log.debug(&quot;using </span><br><span class="line">pooled connection from: &quot; .. proxy.connection.backend_ndx)</span><br><span class="line">         return </span><br><span class="line">proxy.PROXY_IGNORE_RESULT</span><br><span class="line">      end</span><br><span class="line">   end</span><br><span class="line">   -- open a new connection </span><br><span class="line"></span><br><span class="line">   log.info(&quot;opening new connection on: &quot; .. </span><br><span class="line">proxy.backends[proxy.connection.backend_ndx].address)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- auth.packet is the packet</span><br><span class="line">function read_auth_result( auth )</span><br><span class="line">   if </span><br><span class="line">auth.packet:byte() == proxy.MYSQLD_PACKET_OK then</span><br><span class="line">      -- 连接正常</span><br><span class="line">      </span><br><span class="line">proxy.connection.backend_ndx = 0</span><br><span class="line">   elseif auth.packet:byte() == </span><br><span class="line">proxy.MYSQLD_PACKET_EOF then</span><br><span class="line">      -- we received either a </span><br><span class="line">      -- * </span><br><span class="line">MYSQLD_PACKET_ERR and the auth failed or</span><br><span class="line">      -- * MYSQLD_PACKET_EOF which </span><br><span class="line">means a OLD PASSWORD (4.0) was sent</span><br><span class="line">      log.error(&quot;(read_auth_result) ... </span><br><span class="line">not ok yet&quot;);</span><br><span class="line">   elseif auth.packet:byte() == proxy.MYSQLD_PACKET_ERR </span><br><span class="line">then</span><br><span class="line">      log.error(&quot;auth failed!&quot;)</span><br><span class="line">   end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- </span><br><span class="line">-- read/write splitting</span><br><span class="line">function read_query( packet ) </span><br><span class="line">   </span><br><span class="line">log.debug(&quot;[read_query]&quot;)</span><br><span class="line">   log.debug(&quot;authed backend = &quot; .. </span><br><span class="line">proxy.connection.backend_ndx)</span><br><span class="line">   log.debug(&quot;used db = &quot; .. </span><br><span class="line">proxy.connection.client.default_db)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   if packet:byte() == proxy.COM_QUIT then</span><br><span class="line">      proxy.response = </span><br><span class="line">&#123;</span><br><span class="line">         type = proxy.MYSQLD_PACKET_OK,</span><br><span class="line">      &#125;</span><br><span class="line">      return </span><br><span class="line">proxy.PROXY_SEND_RESULT</span><br><span class="line">   end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   if proxy.connection.backend_ndx == 0 then</span><br><span class="line">      local </span><br><span class="line">is_read=(string.upper(packet:sub(2))):match(&quot;^SELECT&quot;)</span><br><span class="line">      local </span><br><span class="line">target_type=proxy.BACKEND_TYPE_RW</span><br><span class="line">      if is_read then </span><br><span class="line">target_type=proxy.BACKEND_TYPE_RO end</span><br><span class="line">      for i = 1, #proxy.backends </span><br><span class="line">do</span><br><span class="line">         local s = proxy.backends[i]</span><br><span class="line">         local pool = s.pool </span><br><span class="line"></span><br><span class="line">         local cur_idle = </span><br><span class="line">pool.users[proxy.connection.client.username].cur_idle_connections</span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">         if cur_idle &gt; 0 and </span><br><span class="line">            s.state ~= </span><br><span class="line">proxy.BACKEND_STATE_DOWN and </span><br><span class="line">            s.type == target_type </span><br><span class="line">then</span><br><span class="line">            proxy.connection.backend_ndx = i</span><br><span class="line">            </span><br><span class="line">break</span><br><span class="line">         end</span><br><span class="line">      end</span><br><span class="line">   end</span><br><span class="line">   -- sync the client-side </span><br><span class="line">default_db with the server-side default_db</span><br><span class="line">   if proxy.connection.server and </span><br><span class="line">proxy.connection.client.default_db ~= proxy.connection.server.default_db </span><br><span class="line">then</span><br><span class="line">      local server_db=proxy.connection.server.default_db</span><br><span class="line">      local </span><br><span class="line">client_db=proxy.connection.client.default_db</span><br><span class="line">      local default_db= </span><br><span class="line">(#client_db &gt; 0) and client_db or server_db</span><br><span class="line">      if #default_db &gt; 0 </span><br><span class="line">then</span><br><span class="line">         proxy.queries:append(2, string.char(proxy.COM_INIT_DB) .. </span><br><span class="line">default_db)</span><br><span class="line">         proxy.queries:append(2, string.char(proxy.COM_QUERY) .. </span><br><span class="line">&quot;set names &apos;&quot; .. encoding ..&quot;&apos;&quot;)</span><br><span class="line">         log.info(&quot;change database to &quot; .. </span><br><span class="line">default_db);</span><br><span class="line">      end</span><br><span class="line">   end</span><br><span class="line">   if proxy.connection.backend_ndx &gt; 0 </span><br><span class="line">then</span><br><span class="line">      log.debug(&quot;Query[&quot; .. packet:sub(2) .. &quot;] Target is [&quot; .. </span><br><span class="line">proxy.backends[proxy.connection.backend_ndx].address ..&quot;]&quot;)</span><br><span class="line">   end</span><br><span class="line">   </span><br><span class="line">proxy.queries:append(1, packet)</span><br><span class="line">   return proxy.PROXY_SEND_QUERY</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">-- as long as we are in a transaction keep the connection</span><br><span class="line">-- </span><br><span class="line">otherwise release it so another client can use it</span><br><span class="line">function read_query_result( </span><br><span class="line">inj ) </span><br><span class="line">   local res      = assert(inj.resultset)</span><br><span class="line">   local flags    = </span><br><span class="line">res.flags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   if inj.id ~= 1 then</span><br><span class="line">      -- ignore the result of the USE </span><br><span class="line">&lt;default_db&gt;</span><br><span class="line">      return proxy.PROXY_IGNORE_RESULT</span><br><span class="line">   end</span><br><span class="line">   </span><br><span class="line">is_in_transaction = flags.in_trans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   if flags.in_trans then</span><br><span class="line">      </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id] = </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id] + 1</span><br><span class="line">   elseif </span><br><span class="line">inj.query:sub(2):lower():match(&quot;^%s*commit%s*$&quot;) or </span><br><span class="line">inj.query:sub(2):lower():match(&quot;^%s*rollback%s*$&quot;) then</span><br><span class="line">      </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id] = </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id] - 1</span><br><span class="line">      if </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id] &lt; 0 then </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id] = 0 end</span><br><span class="line">   end</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   log.debug(&quot;transaction res : &quot; .. </span><br><span class="line">tostring(transaction_flags[proxy.connection.server.thread_id]));</span><br><span class="line">   if </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id]==0 or </span><br><span class="line">transaction_flags[proxy.connection.server.thread_id] == nil then </span><br><span class="line">      -- </span><br><span class="line">isnot in a transaction, need to release the backend</span><br><span class="line">      </span><br><span class="line">proxy.connection.backend_ndx = 0</span><br><span class="line">   end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- </span><br><span class="line">-- close the connections if we have enough connections in the </span><br><span class="line">pool</span><br><span class="line">--</span><br><span class="line">-- @return nil - close connection </span><br><span class="line">-- IGNORE_RESULT - store </span><br><span class="line">connection in the pool</span><br><span class="line">function disconnect_client()</span><br><span class="line">   </span><br><span class="line">log.debug(&quot;[disconnect_client]&quot;)</span><br><span class="line">   if proxy.connection.backend_ndx == 0 </span><br><span class="line">then</span><br><span class="line">      for i = 1, #proxy.backends do</span><br><span class="line">         local s = </span><br><span class="line">proxy.backends[i]</span><br><span class="line">         local pool = s.pool </span><br><span class="line">         local cur_idle = </span><br><span class="line">pool.users[proxy.connection.client.username].cur_idle_connections</span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">         if s.state ~= proxy.BACKEND_STATE_DOWN and</span><br><span class="line">            cur_idle </span><br><span class="line">&gt; max_idle_connections then</span><br><span class="line">            -- try to disconnect a </span><br><span class="line">backend</span><br><span class="line">            proxy.connection.backend_ndx = i</span><br><span class="line">            </span><br><span class="line">log.info(&quot;[&quot;.. proxy.backends[i].address ..&quot;] closing connection, idling: &quot; .. </span><br><span class="line">cur_idle)</span><br><span class="line">            return</span><br><span class="line">         end</span><br><span class="line">      end</span><br><span class="line">      return </span><br><span class="line">proxy.PROXY_IGNORE_RESULT</span><br><span class="line">   end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用mysql-proxy-快速实现mysql-集群-读写分离&quot;&gt;&lt;a href=&quot;#使用mysql-proxy-快速实现mysql-集群-读写分离&quot; class=&quot;headerlink&quot; title=&quot;使用mysql-proxy 快速实现mysql 集群 读写分
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://grapedlinux.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>查看mysql主从复制延迟和数据中断--带脚本</title>
    <link href="http://grapedlinux.cn/2017/03/23/17032303/"/>
    <id>http://grapedlinux.cn/2017/03/23/17032303/</id>
    <published>2017-03-23T10:07:14.000Z</published>
    <updated>2017-03-23T10:14:39.464Z</updated>
    
    <content type="html"><![CDATA[<p>查看mySQL延迟的方法，查看了多个案例，大家众说纷纭，意见差不多一致。如下也是我参考别人经验做的一些测试，希望能检测到mysql复制延迟、数据中断。</p><h4 id="方法一、查看Seconds-Behind-Master"><a href="#方法一、查看Seconds-Behind-Master" class="headerlink" title="方法一、查看Seconds_Behind_Master"></a>方法一、查看Seconds_Behind_Master</h4><p><strong>该参数有如下值：</strong></p><p>NULL  表示io_thread或sql_thread有一个发生故障，就是说该线程的Running状态时No，而非Yes<br>0     表示主从复制良好，没有lag存在<br>正值  表示主从已出现延时，数字越大表示从库落后主库越多<br>负值  很罕见，是一个BUG，按理说不应该出现</p><p>该方法是使用命令show slave status,通过比较SQL THREAD接受events时间的时间戳与IO THREAD执行事件events时间戳的差值–秒数，来确定slave落后于master多少，如主从</p><p>时间不同，改时间的计算不受影响<br>众所周知备库relay-log和主库的bin-log里的内容一样，真正和主库有关两的是io_thread，当主库I/O负载很大或网络阻塞时，io_thread不能及时复制binlog，而sql_thread一</p><p>直能跟上io_thread的脚步，这时seconds_behind_master的值是0，实际上却不是，这时用该值作为延迟参考则不准。<br>change master to master_host=’192.168.2.7’,master_user=’tongbu’,master_password=’123456’,master_log_file=’mysql-bin.000008’,master_log_pos=291263843;</p><h4 id="方法二、使用pt-heartbeat工具"><a href="#方法二、使用pt-heartbeat工具" class="headerlink" title="方法二、使用pt-heartbeat工具"></a>方法二、使用pt-heartbeat工具</h4><p> 该工具可以计算出MySQL复制或者是PostgreSQL,它可以更新master或者监控复制。它还可以从f 读取配置。它借助timestmp的比较实现的，首先需要保证主从服务器时间必须要</p><p>保持一致，通过与相同的一个NTP server同步时钟。它需要在主库上创建一个heartbeat的表，里面的时间戳ts就是当前的时间戳 now()，该结构也会被复制到从库上。表建好以后</p><p>，会在主库上以后台进程的模式去执行一行更新操作的命令，定期去向表中的插入数据，这 个周期默认为1 秒，同时从库也会在后台执行一个监控命令，与主库保持一致的周期</p><p>+0.5S（默认0.5S延迟检查）去比较，复制过来记录的ts值与主库上的同一条ts值，差值为0表示无延时，差值越大表示 延时的秒数越多。</p><p>使用工具前提：</p><ol><li><p>在主库上建立heartbeat表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt-heartbeat -h localhost -D test  --create-table --update</span><br></pre></td></tr></table></figure></li><li><p>更新主库上的heartbeat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt-heartbeat -D test --master-server-id=1 --update</span><br></pre></td></tr></table></figure></li><li><p>在从库上监控复制延迟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pt-heartbeat --user=tongbu --password=&apos;123456&apos; -D test --monitor -h 192.168.2.9 --print-master-server-id</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.01s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br><span class="line">0.00s [  0.00s,  0.00s,  0.00s ] 1</span><br></pre></td></tr></table></figure></li></ol><p>当然还有其他一些操作命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#将主库上的update使用守护进程方式调度</span><br><span class="line">pt-heartbeat -D test --master-server-id=1 --update --daemonize</span><br><span class="line">#修改主库上的更新时间间隔为2s</span><br><span class="line">pt-heartbeat -D test --update --daemonize --interval=2</span><br><span class="line">#修改主库上的pt-heartbeat守护进程</span><br><span class="line">pt-heartbeat --stop</span><br><span class="line">Successfully created file /tmp/pt-heartbeat-sentinel</span><br><span class="line">rm -rf /tmp/pt-heartbeat-sentinel</span><br><span class="line">#单词查看从库上的延迟情况</span><br><span class="line">pt-heartbeat --user=tongbu --password=&apos;123456&apos; -D test  -h 192.168.2.9 --check</span><br><span class="line">0.00</span><br><span class="line">#使用守护进程监控从库并输出日志</span><br><span class="line">pt-heartbeat --user=tongbu --password=&apos;123456&apos; -h 192.168.2.9 -D test --master-server-id=1 --monitor --print-master-server-id --daemonize --log=/var/log/pt_slave_lag.log</span><br></pre></td></tr></table></figure><hr><p>如下是脚本的方式，只不过使用脚本的方式实现的。如果有什么地方需要完善的，请各位看客留言提示哦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#description:check slave replication delay</span><br><span class="line">PT=`which pt-heartbeat`</span><br><span class="line">ADMIN=`which mysqladmin`</span><br><span class="line">MYSQL=`which mysql`</span><br><span class="line">WARN=10</span><br><span class="line">CRITIC=20</span><br><span class="line">COMMON=3</span><br><span class="line">MASTERID=1</span><br><span class="line">###############</span><br><span class="line">watch_update()&#123;</span><br><span class="line">RE=`ps -ef|grep $PT|grep -v grep|grep &quot;\--update&quot;`</span><br><span class="line">if [ ! -n &quot;$RE&quot; ];then</span><br><span class="line">   $PT -D test --master-server-id=$MASTERID --update --daemonize</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">################</span><br><span class="line">watch_mysql()&#123;</span><br><span class="line">SAFE_STATUS=`ps -ef|grep -w mysqld_safe|grep -v grep`</span><br><span class="line">MYSQLD_STATUS=`ps -ef|grep -w mysqld|grep -v grep`</span><br><span class="line">if [ ! -n &quot;$SAFE_STATUS&quot; ];then</span><br><span class="line">   echo &quot;Mysqld_safe doesn&apos;t running,Please check your mysqld_safe status&quot;</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line">if [ ! -n &quot;$MYSQLD_STATUS&quot; ];then</span><br><span class="line">   echo &quot;Mysqld program status --stop,Please check your mysqld status &quot;</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">####################</span><br><span class="line">watch_mysql_slave()&#123;</span><br><span class="line">REP_STATUS=`$ADMIN processlist|grep &quot;Binlog Dump&quot;`</span><br><span class="line">if [ ! -n &quot;$REP_STATUS&quot; ];then</span><br><span class="line">    echo &quot;slave process doesn&apos;t running,Please check your replication&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">#################</span><br><span class="line">enter_slave_info()&#123;</span><br><span class="line">  echo &quot;please enter your slave username:&quot;</span><br><span class="line">  read NAME</span><br><span class="line">  if [  -n &quot;$NAME&quot; ];then</span><br><span class="line">      echo &quot; you enter username is: $NAME&quot;</span><br><span class="line">  fi</span><br><span class="line">  </span><br><span class="line">  echo &quot;please enter your slave user password:&quot;</span><br><span class="line">  read PASS</span><br><span class="line">  if [ -n &quot;$PASS&quot; ];then</span><br><span class="line">      echo &quot;you enter user password is: $PASS&quot;</span><br><span class="line">  fi  </span><br><span class="line">  </span><br><span class="line">  echo &quot;please enter your slave hostname or address:&quot;</span><br><span class="line">  read ADDR</span><br><span class="line">  if [ -n &quot;$ADDR&quot; ];then</span><br><span class="line">      echo &quot;you enter slave hostname or address is: $ADDR&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">##################</span><br><span class="line">watch_slave_delay()&#123;</span><br><span class="line">#  echo &quot;please enter your watch options(1.check 2.monitor)&quot;</span><br><span class="line">#  read OPTION</span><br><span class="line">#  if  [ $OPTION -eq 1 ];then</span><br><span class="line">      SLAVE_DELAY=`$PT --user=$NAME --password=&quot;$PASS&quot; -h $ADDR -D test --master-server-id=$MASTERID --check --print-master-server-id`</span><br><span class="line">#  elif [ $OPTION -eq 2 ];then</span><br><span class="line">#      `$PT --user=$NAME --password=&quot;PASS&quot; -h $ADDR -D test --master-server-id=$MASTERID --monitor --print-master-server-id`</span><br><span class="line">#  else</span><br><span class="line">#       echo &quot;your enter are error,now EXIT&quot;</span><br><span class="line">#       exit 1</span><br><span class="line">#  fi</span><br><span class="line">if [ ! -n &quot;$SLAVE_DELAY&quot; ];then</span><br><span class="line">   echo &quot;Your pt-heartbeat tool must haven&apos;t install or you username,password,slave hostname ERROR&quot;</span><br><span class="line">   exit 1</span><br><span class="line">else</span><br><span class="line">   echo &quot;DELAY TIME:  $SLAVE_DELAY&quot;</span><br><span class="line">fi  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##################################</span><br><span class="line">watch_slave_interrupt()&#123;</span><br><span class="line">  INT_RE=`$MYSQL -s -u $NAME -p&quot;$PASS&quot; -h $ADDR -e &apos;show slave status\G&apos;|grep &quot;Last_Error:&quot;`</span><br><span class="line">  if [ -n &quot;$INT_RE&quot; ];then</span><br><span class="line">    echo &quot;$INT_RE&quot;</span><br><span class="line">  else</span><br><span class="line">    echo  &quot;INTERUUPT Info: &quot;</span><br><span class="line">    echo  &quot;$INT_RE&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">########################</span><br><span class="line">WATCH()&#123;</span><br><span class="line">watch_slave_delay</span><br><span class="line">watch_slave_interrupt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#########################</span><br><span class="line">START_WATCH()&#123;</span><br><span class="line">  watch_mysql</span><br><span class="line">  watch_mysql_slave</span><br><span class="line">  watch_update</span><br><span class="line">  enter_slave_info </span><br><span class="line">&#125;</span><br><span class="line">##########################</span><br><span class="line">LOOP_WATCH()&#123;</span><br><span class="line">  START_WATCH</span><br><span class="line">echo &quot;+++++++++++++ DELAY INFO  ++++++++++++++++&quot;</span><br><span class="line">  while true;do</span><br><span class="line">    WATCH</span><br><span class="line">    sleep 30</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line">##########################</span><br><span class="line">LOOP_WATCH</span><br></pre></td></tr></table></figure><p>脚本运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">./delay.sh </span><br><span class="line">please enter your slave username:</span><br><span class="line">tongbu</span><br><span class="line">you enter username is: tongbu</span><br><span class="line">please enter your slave user password:</span><br><span class="line">123456</span><br><span class="line">you enter user password is: 123456</span><br><span class="line">please enter your slave hostname or address:</span><br><span class="line">192.168.2.9</span><br><span class="line">you enter slave hostname or address is: 192.168.2.9</span><br><span class="line">+++++++++++++ DELAY INFO  ++++++++++++++++</span><br><span class="line">DELAY TIME:  0.36 1</span><br><span class="line">Warning: Using a password on the command line interface can be insecure.</span><br><span class="line">                   Last_Error: </span><br><span class="line">DELAY TIME:  0.96 1</span><br><span class="line">Warning: Using a password on the command line interface can be insecure.</span><br><span class="line">                   Last_Error: </span><br><span class="line">DELAY TIME:  0.12 1</span><br><span class="line">Warning: Using a password on the command line interface can be insecure.</span><br><span class="line">                   Last_Error: </span><br><span class="line">DELAY TIME:  1.91 1</span><br><span class="line">Warning: Using a password on the command line interface can be insecure.</span><br><span class="line">                   Last_Error:</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看mySQL延迟的方法，查看了多个案例，大家众说纷纭，意见差不多一致。如下也是我参考别人经验做的一些测试，希望能检测到mysql复制延迟、数据中断。&lt;/p&gt;
&lt;h4 id=&quot;方法一、查看Seconds-Behind-Master&quot;&gt;&lt;a href=&quot;#方法一、查看Seco
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://grapedlinux.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>XtraBackup不停机不锁表搭建MySQL主从同步实践</title>
    <link href="http://grapedlinux.cn/2017/03/23/17032302/"/>
    <id>http://grapedlinux.cn/2017/03/23/17032302/</id>
    <published>2017-03-23T09:39:01.000Z</published>
    <updated>2017-03-23T10:13:20.348Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://segmentfault.com/image?src=//i.v2ex.co/02ftb7pa.jpeg&amp;objectId=1190000003063874&amp;token=84a6c16fc60173037b58ca5da83f56a8" alt="image"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Percona XtraBackup可以说是一个相对完美的免费开源数据备份工具，支持在线无锁表同步复制和可并行高效率的安全备份恢复机制相比mysqldump来说确实让人眼前一亮，与MySQL Enterprise Backup(InnoDB Hot Backup)的功能对比可以参考扩展阅读。当然我们在实际运维过程中都应针对不同的业务需求分析和选择合适的备份恢复方案，这篇文章就是针对MySQL多实例且一个实例对应多个database的情况，实现MySQL在线不停机不锁表的主从同步，日后再继续更新分享基于XtraBackup的其它实用技能。</p><pre><code>XtraBackup是目前首选的备份方案之一 </code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="MySQL主从同步原理"><a href="#MySQL主从同步原理" class="headerlink" title="MySQL主从同步原理"></a>MySQL主从同步原理</h4><p>MySQL主从同步是在MySQL主从复制(Master-Slave Replication)基础上实现的，通过设置在Master MySQL上的binlog(使其处于打开状态)，Slave MySQL上通过一个I/O线程从Master MySQL上读取binlog，然后传输到Slave MySQL的中继日志中，然后Slave MySQL的SQL线程从中继日志中读取中继日志，然后应用到Slave MySQL的数据库中。这样实现了主从数据同步功能。</p><h4 id="XtraBackup备份原理"><a href="#XtraBackup备份原理" class="headerlink" title="XtraBackup备份原理"></a>XtraBackup备份原理</h4><p>innobackupex在后台线程不断追踪InnoDB的日志文件，然后复制InnoDB的数据文件。数据文件复制完成之后，日志的复制线程也会结束。这样就得到了不在同一时间点的数据副本和开始备份以后的事务日志。完成上面的步骤之后，就可以使用InnoDB崩溃恢复代码执行事务日志（redo log），以达到数据的一致性。<br>备份分为两个过程：</p><ol><li>backup，备份阶段，追踪事务日志和复制数据文件（物理备份）。</li><li>preparing，重放事务日志，使所有的数据处于同一个时间点，达到一致性状态。<h4 id="XtraBackup的优点"><a href="#XtraBackup的优点" class="headerlink" title="XtraBackup的优点"></a>XtraBackup的优点</h4></li><li>可以快速可靠的完成数据备份（复制数据文件和追踪事务日志）</li><li>数据备份过程中不会中断事务的处理（热备份）</li><li>节约磁盘空间和网络带宽</li><li>自动完成备份鉴定</li><li>因更快的恢复时间而提高在线时间</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>MySQL步骤和my.cnf配置参考<a href="https://graped.github.io/2017/03/23/17032301/" target="_blank" rel="noopener">mysql主从配置</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#原有主数据库版本</span><br><span class="line">mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.5.31, for Linux (x86_64) using readline 5.1</span><br><span class="line"></span><br><span class="line">#迁移从数据库版本</span><br><span class="line">mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.25, for linux-glibc2.5 (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">#检查数据库引擎</span><br><span class="line">show engines;</span><br><span class="line"></span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#主从数据库同步注意点</span><br><span class="line">[mysqld]</span><br><span class="line">#主从之间的id不能相同</span><br><span class="line">server-id</span><br><span class="line">#启用二进制日志</span><br><span class="line">log-bin</span><br><span class="line">#一般在从库开启（可选）</span><br><span class="line">read_only</span><br><span class="line">#推荐使用InnoDB并做好相关配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#检查主从数据库状态</span><br><span class="line">mysql -S /tmp/mysql.sock -e &quot;show global variables like &apos;server_id&apos;;&quot;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 1     |</span><br><span class="line">+---------------+-------+</span><br><span class="line"></span><br><span class="line">mysql -S /tmp/mysql.sock -e &quot;show global variables like &apos;log_bin&apos;;&quot;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | ON    |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><h4 id="安装percona-xtrabackup"><a href="#安装percona-xtrabackup" class="headerlink" title="安装percona-xtrabackup"></a>安装percona-xtrabackup</h4><p>一般推荐rpm安装 - <a href="https://www.percona.com/downloads/XtraBackup/LATEST/" target="_blank" rel="noopener">https://www.percona.com/downloads/XtraBackup/LATEST/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br><span class="line">#rpm -ivh percona-xtrabackup-2.2.12-1.el6.x86_64.rpm </span><br><span class="line">rpm -Uvh percona-xtrabackup-2.2.12-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure></p><h4 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h4><p>通常一般都直接使用innobackupex，因为它能同时备份InnoDB和MyISAM引擎的表 重点关注Slave_IO_Running和Slave_SQL_Runningd的状态是否为YES.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#备份</span><br><span class="line">innobackupex --socket=/usr/local/var/mysql2/mysql2.sock --user=root --password --defaults-file=/etc/mysqld_multi.cnf --parallel=4 --database=passport /tmp/backup</span><br><span class="line">#保持事务一致性</span><br><span class="line">innobackupex --socket=/usr/local/var/mysql2/mysql2.sock --user=root --password --defaults-file=/etc/mysqld_multi.cnf --database=passport --apply-log /tmp/backup/2015-08-05_16-08-14</span><br><span class="line">#传输</span><br><span class="line">scp -r /tmp/backup/2015-08-05_16-08-14 10.10.16.24:/tmp/backup/ </span><br><span class="line">#恢复</span><br><span class="line">innobackupex --socket=/tmp/mysql.sock --user=root --password --defaults-file=/app/local/mysql/my.cnf --copy-back /tmp/backup/2015-08-05_16-08-14/</span><br><span class="line">#还原权限</span><br><span class="line">chown -R mysql:mysql /app/data/mysql/data</span><br><span class="line">service mysqld start</span><br><span class="line">/app/local/mysql/scripts/mysql_install_db --basedir=/app/local/mysql --datadir=/app/data/mysql/data --no-defaults --skip-name-resolve --user=mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#主库授权同步帐号</span><br><span class="line">SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user;</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO &apos;slave_passport&apos;@&apos;10.10.16.24&apos; IDENTIFIED BY &apos;slave_passport&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">#从库开启同步</span><br><span class="line">cat /tmp/backup/2015-08-05_16-08-14/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.002599    804497686</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&apos;10.10.16.51&apos;,</span><br><span class="line">MASTER_USER=&apos;slave_passport&apos;,</span><br><span class="line">MASTER_PASSWORD=&apos;slave_passport&apos;,</span><br><span class="line">MASTER_PORT=3307,</span><br><span class="line">MASTER_LOG_FILE=&apos;mysql-bin.002599&apos;,</span><br><span class="line">MASTER_LOG_POS=804497686;</span><br><span class="line"></span><br><span class="line">#开启主从同步</span><br><span class="line">start slave;</span><br><span class="line">#查看从库状态</span><br><span class="line">show slave status\ G</span><br><span class="line">#从库的检查参数</span><br><span class="line">Slave_IO_Running=Yes</span><br><span class="line">Slave_SQL_Running=Yes</span><br><span class="line"></span><br><span class="line">#主库的检查参数</span><br><span class="line">show master status \G</span><br><span class="line"></span><br><span class="line">+------------------+-----------+--------------+------------------+</span><br><span class="line">| File             | Position  | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+-----------+--------------+------------------+</span><br><span class="line">| mysql-bin.002600 | 454769337 |              |                  |</span><br><span class="line">+------------------+-----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show processlist;</span><br><span class="line"></span><br><span class="line">Master has sent all binlog to slave; waiting for binlog to be updated</span><br></pre></td></tr></table></figure></p><h4 id="MySQL主从切换"><a href="#MySQL主从切换" class="headerlink" title="MySQL主从切换"></a>MySQL主从切换</h4><p>切换前断开主库访问连接观察进程状态，无写操作后再停止从库IO_THREAD进行切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#查看主库状态</span><br><span class="line">show processlist;</span><br><span class="line">Master has sent all binlog to slave; waiting for binlog to be updated</span><br><span class="line">show master status \G</span><br><span class="line"></span><br><span class="line">#从库停止 IO_THREAD 线程</span><br><span class="line">stop slave IO_THREAD;</span><br><span class="line">show processlist;</span><br><span class="line">Slave has read all relay log; waiting for the slave I/O thread to update it</span><br><span class="line">show slave status \G</span><br><span class="line"></span><br><span class="line">#从库切换为主库</span><br><span class="line">stop slave;</span><br><span class="line">reset master;</span><br><span class="line">reset slave all;</span><br><span class="line">show master status \G</span><br><span class="line"></span><br><span class="line">#激活帐户</span><br><span class="line">SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user;</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO &apos;slave_passport&apos;@&apos;10.10.16.51&apos; IDENTIFIED BY &apos;slave_passport&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">#切换原有主库为从库</span><br><span class="line">reset master;</span><br><span class="line">reset slave all;</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&apos;10.10.16.24&apos;,</span><br><span class="line">MASTER_USER=&apos;slave_passport&apos;,</span><br><span class="line">MASTER_PASSWORD=&apos;slave_passport&apos;,</span><br><span class="line">MASTER_PORT=3306,</span><br><span class="line">MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;,</span><br><span class="line">MASTER_LOG_POS=804497686;</span><br><span class="line"></span><br><span class="line">#检查主库</span><br><span class="line">SHOW PROCESSLIST;</span><br><span class="line">show master status \G</span><br><span class="line"></span><br><span class="line">#启动从库</span><br><span class="line">SHOW PROCESSLIST;</span><br><span class="line">start slave;</span><br><span class="line">show slave status \G</span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Slave_SQL_Running:No</span><br></pre></td></tr></table></figure><p>一般是事务回滚造成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://segmentfault.com/image?src=//i.v2ex.co/02ftb7pa.jpeg&amp;amp;objectId=1190000003063874&amp;amp;token=84a6c16fc60173037b58ca5da8
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://grapedlinux.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql主从配置</title>
    <link href="http://grapedlinux.cn/2017/03/23/17032301/"/>
    <id>http://grapedlinux.cn/2017/03/23/17032301/</id>
    <published>2017-03-22T16:40:53.000Z</published>
    <updated>2017-03-23T10:13:03.968Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL Replication 又叫做AB复制或者主从复制。它主要用于MySQL的时时备份或者读写分离。在配置之前先做一下准备工作，配置两台mysql服务器，或者在一台服务器上配置两个端口也可以。这里的的实验中就是在一台服务器上跑了两个mysql。</p><p>原理：MySQL的Replication是一个异步的复制过程，从一个MySQL实例(Master)复制到另一台MySQL实例上。在Master和Slave之间复制的整个过程主要由3个线程完成，其中两个线程（SQL线程和IO线程）在Slave端，另外一个线程(IO线程)在Master端。</p><p>要实现主从复制，首先要在Master端打开Binary Log功能。因为整个复制过程实际上就是Slave从Master上获取二进制日志，然后在自己身上完全按照产生的顺序一次执行日志中记录的各种操作的过程。</p><p>复制的具体过程如下：<br><img src="http://i.imgur.com/00V0oox.jpg" alt=""></p><ol><li>Slave的IO线程连上Master，并请求日志文件指定位置(或从开始的日志)之后的日志的内容。</li><li>Master接收到来自Slave的IO线程请求后，负责复制IO线程根据请求的信息读取指定日志之后的日志信息，返回给Slave端的IO线程。返回信息中除了日志所包含的信息，还包含了包括本次返回的信息在Master端的Binary Log文件的名称和位置。</li><li>Slave的IO线程接受到信息后，将日志内容一次写入Slave端的Relay Log文件(mysql-relay-bin.xxxx)的末端，并将读取到的Master端的bin-log的文件和位置记录到master-info文件中，以便在下一次读取时能够清楚地告诉Master，下次从bin-log哪个位置开始往后的日志内容。</li><li>Log中更新内容后，会马上解析该Log文件中的内容，还原成在Master端真实执行时的可执行的SQL语句，并执行这些SQK语句。实际上Master和Slave执行同样的语句。</li></ol><h4 id="1-配置mysql服务"><a href="#1-配置mysql服务" class="headerlink" title="1. 配置mysql服务"></a>1. 配置mysql服务</h4><p>MySql的安装和配置请看 <a href="http://note.youdao.com/noteshare?id=422b6e3979605208435c7b47862d072e&amp;sub=74A86154E4AC44F5B4B46218100AB0FE" target="_blank" rel="noopener">Mysql 安装</a><br>按照上面的步骤，你可以成功搭建好一个mysql，跑的是3306端口，下面我们搭建第二个mysql，指定的端口为：3307：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">cp -r mysql mysql_slave</span><br><span class="line">cd mysql_2</span><br><span class="line">./scripts/mysql_install_db --user=mysql --datadir=/data/mysql_slave</span><br></pre></td></tr></table></figure></p><p>最后一步是初始化数据库目录，如果出现两个“OK”并且生成/data/mysql2目录才正确，否则请仔细查看错误信息.<br>拷贝配置文件到mysql_2下，并修改相关项目:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/my.cnf  ./my.cnf</span><br><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure></p><p>把<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port          = 3306</span><br><span class="line">socket        = /tmp/mysql.sock</span><br></pre></td></tr></table></figure></p><p>改为： 并增加一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port          = 3307</span><br><span class="line">socket        = /tmp/mysql_slave.sock</span><br><span class="line">datadir         = /data/mysql_slave</span><br></pre></td></tr></table></figure></p><p>拷贝编辑启动脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/init.d/mysqld /etc/init.d/mysqldslave</span><br><span class="line">vim /etc/init.d/mysqldslave</span><br></pre></td></tr></table></figure></p><p>需要修改的部分，修改后为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basedir=/usr/local/mysql_slave</span><br><span class="line">datadir=/data/mysql_slave</span><br><span class="line">conf=$basedir/my.cnf</span><br></pre></td></tr></table></figure><p>之后启动即可。</p><p>至此，在一台机器上已经启动了两个mysql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp |grep mysqld</span><br><span class="line">tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      7217/mysqld         </span><br><span class="line">tcp        0      0 0.0.0.0:3307                0.0.0.0:*                   LISTEN      7469/mysqld         </span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     42591  7217/mysqld         /tmp/mysql.sock</span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     48423  7469/mysqld         /tmp/mysql_slave.sock</span><br></pre></td></tr></table></figure><h4 id="2-配置主从准备工作"><a href="#2-配置主从准备工作" class="headerlink" title="2. 配置主从准备工作"></a>2. 配置主从准备工作</h4><p>这里我们打算把3306端口的mysql作为主(master)，而把3307的mysql作为从(slave). 为了让实验更加像生产环境，所以在master上创建一个库db1，并且把mysql的库数据复制给它:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -S /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">mysql&gt; create database db1;</span><br><span class="line">Query OK, 1 row affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure></p><p>-S 后面指定mysql的socket文件路径，这也是登陆mysql的一种方法，因为在一台服务器上跑了两个mysql端口，所以，只能用 -S 这样的方法来区分。首先创建了db1库，然后把mysql库的数据复制给它:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -S /tmp/mysql.sock mysql &gt; 123.sql</span><br><span class="line">mysql -uroot -S /tmp/mysql.sock db1 &lt; 123.sql</span><br><span class="line"></span><br><span class="line">//进入mysql后可以看到：</span><br><span class="line"></span><br><span class="line">mysql&gt; use db1;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_db1             |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">23 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h4 id="3-配置主（master）"><a href="#3-配置主（master）" class="headerlink" title="3. 配置主（master）"></a>3. 配置主（master）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在[mysqld]部分查看是否有以下内容，如果没有则添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server-id=1</span><br><span class="line">log-bin=keso</span><br></pre></td></tr></table></figure></p><p>除了这两行是必须的外，还有两个参数，你可以选择性（2选1）的使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binlog-do-db=databasename1,databasename2 #用来指定需要同步的库</span><br><span class="line">binlog-ignore-db=databasename1,databasename2 #用来指定忽略不同步的库</span><br></pre></td></tr></table></figure></p><p>完成后重启mysqld服务。然后进入主mysql并授权给从一个用来同步数据的用户 repl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to &apos;repl&apos;@&apos;127.0.0.1&apos; identified by &apos;111111&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec) #刷新MySQL的系统权限相关表</span><br><span class="line"></span><br><span class="line">mysql&gt; flush tables with read lock;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec) #锁定数据库，此时不允许更改任何数据</span><br><span class="line"></span><br><span class="line"> show master status; #查看状态，这些数据是要记录的，一会要在slave端用到</span><br><span class="line">+-------------+----------+--------------+------------------+</span><br><span class="line">| File        | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+-------------+----------+--------------+------------------+</span><br><span class="line">| keso.000001 |      331 |              |                  |</span><br><span class="line">+-------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="4-配置从（slave）"><a href="#4-配置从（slave）" class="headerlink" title="4. 配置从（slave）"></a>4. 配置从（slave）</h4><p>先修改slave的配置文件my.cnf:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mysql_slave/my.cnf</span><br></pre></td></tr></table></figure></p><p>修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2 #可以是出1意外的其他任何数字</span><br></pre></td></tr></table></figure></p><p>总之不能让这个id和master一样，否则会报错。另外在从上，你也可以选择性的增加如下两行，意义同主的那两个可选参数，如果在主上已经定义过了，那么在从上就不用再定义了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicate-do-db=databasename1,databasename2</span><br><span class="line">replicate-ignore-db=databasename1,databasename2</span><br></pre></td></tr></table></figure></p><p>改完后，重启slave:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysqldslave restart</span><br></pre></td></tr></table></figure></p><p>拷贝master上的db1库的数据到slave上，因为master和slave都在一台服务器上，所以操作起来简单了很多，如果是不同的机器，可能就需要远程拷贝了，希望你注意这一点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -S /tmp/mysql_slave.sock -e &quot;create database db1&quot;</span><br><span class="line">mysql -S /tmp/mysql_slave.sock db1&lt;123.sql</span><br></pre></td></tr></table></figure></p><p>登录从，并执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">mysql -S /tmp/mysql_slave.sock </span><br><span class="line"></span><br><span class="line">mysql&gt; slave stop ;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host=&apos;127.0.0.1&apos;, master_port=3306,master_user=&apos;repl&apos;, master_password=&apos;111111&apos;,master_log_file=&apos;keso.000001&apos;, master_log_pos=331; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; slave start;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 127.0.0.1</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: keso.000001</span><br><span class="line">          Read_Master_Log_Pos: 331</span><br><span class="line">               Relay_Log_File: KesoLinux-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 246</span><br><span class="line">        Relay_Master_Log_File: keso.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 331</span><br><span class="line">              Relay_Log_Space: 405</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>确认Slave_IO_Running和Slave_SQL_Running 同时为yes时，才算正常。</p><h4 id="5-测试主从"><a href="#5-测试主从" class="headerlink" title="5. 测试主从"></a>5. 测试主从</h4><p>在master上执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from db; </span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; truncate table db;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这样清空了db1.db表的数据，下面查看slave上的该表数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">elect count(*) from db；</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        0 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure></p><p>slave上的该表也被清空了。这样好像不太明显，不妨继续把db表删除试试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table db；</span><br></pre></td></tr></table></figure></p><p>在slave上可以再使用select是可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from db&quot;</span><br><span class="line">ERROR 1146 (42S02) at line 1: Table &apos;db1.db&apos; doesn&apos;t exist</span><br></pre></td></tr></table></figure></p><p>主从配置起来很简单，但是这种机制也是非常脆弱的，一旦我们不小心在从上写了数据，那么主从也就被破坏了。另外如果重启master，务必要先把slave停掉，也就是说需要在slave上去执行 slave stop 命令，然后再去重启master的mysql服务，否则很有可能就会中断了。当然重启完后，还需要把slave给开启 slave start.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL Replication 又叫做AB复制或者主从复制。它主要用于MySQL的时时备份或者读写分离。在配置之前先做一下准备工作，配置两台mysql服务器，或者在一台服务器上配置两个端口也可以。这里的的实验中就是在一台服务器上跑了两个mysql。&lt;/p&gt;
&lt;p&gt;原理：
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://grapedlinux.cn/tags/mysql/"/>
    
  </entry>
  
</feed>
